/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DozerGpsDataMsg'
 * message type.
 */

 package ch.epfl.gsn.wrappers.backlog.plugins.tinyos2x;

public class DozerGpsDataMsg extends DataHeaderMsg {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 37;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 208;

    /** Create a new DozerGpsDataMsg of size 37. */
    public DozerGpsDataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DozerGpsDataMsg of the given data_length. */
    public DozerGpsDataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerGpsDataMsg with the given data_length
     * and base offset.
     */
    public DozerGpsDataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerGpsDataMsg using the given byte array
     * as backing store.
     */
    public DozerGpsDataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerGpsDataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DozerGpsDataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerGpsDataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DozerGpsDataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerGpsDataMsg embedded in the given message
     * at the given base offset.
     */
    public DozerGpsDataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerGpsDataMsg embedded in the given message
     * at the given base offset and length.
     */
    public DozerGpsDataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DozerGpsDataMsg> \n";
      try {
        s += "  [header.seqNr=0x"+Long.toHexString(get_header_seqNr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.originatorID=0x"+Long.toHexString(get_header_originatorID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.low=0x"+Long.toHexString(get_header_aTime_low())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.high=0x"+Long.toHexString(get_header_aTime_high())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.timeOfWeekMS=0x"+Long.toHexString(get_payload_timeOfWeekMS())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.weekNumber=0x"+Long.toHexString(get_payload_weekNumber())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrierPhase_double_0=0x"+Long.toHexString(get_payload_carrierPhase_double_0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrierPhase_double_1=0x"+Long.toHexString(get_payload_carrierPhase_double_1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrierPhase_double_2=0x"+Long.toHexString(get_payload_carrierPhase_double_2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrierPhase_double_3=0x"+Long.toHexString(get_payload_carrierPhase_double_3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrierPhase_double_4=0x"+Long.toHexString(get_payload_carrierPhase_double_4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrierPhase_double_5=0x"+Long.toHexString(get_payload_carrierPhase_double_5())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrierPhase_double_6=0x"+Long.toHexString(get_payload_carrierPhase_double_6())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrierPhase_double_7=0x"+Long.toHexString(get_payload_carrierPhase_double_7())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudoRange_double_0=0x"+Long.toHexString(get_payload_pseudoRange_double_0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudoRange_double_1=0x"+Long.toHexString(get_payload_pseudoRange_double_1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudoRange_double_2=0x"+Long.toHexString(get_payload_pseudoRange_double_2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudoRange_double_3=0x"+Long.toHexString(get_payload_pseudoRange_double_3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudoRange_double_4=0x"+Long.toHexString(get_payload_pseudoRange_double_4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudoRange_double_5=0x"+Long.toHexString(get_payload_pseudoRange_double_5())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudoRange_double_6=0x"+Long.toHexString(get_payload_pseudoRange_double_6())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudoRange_double_7=0x"+Long.toHexString(get_payload_pseudoRange_double_7())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.doppler_single_0=0x"+Long.toHexString(get_payload_doppler_single_0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.doppler_single_1=0x"+Long.toHexString(get_payload_doppler_single_1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.doppler_single_2=0x"+Long.toHexString(get_payload_doppler_single_2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.doppler_single_3=0x"+Long.toHexString(get_payload_doppler_single_3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.vehicleNum=0x"+Long.toHexString(get_payload_vehicleNum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.measIndicator=0x"+Long.toHexString(get_payload_measIndicator())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.signalStrength=0x"+Long.toHexString(get_payload_signalStrength())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.lossLockIndicator=0x"+Long.toHexString(get_payload_lossLockIndicator())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqNr
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqNr' is signed (false).
     */
    public static boolean isSigned_header_seqNr() {
        return false;
    }

    /**
     * Return whether the field 'header.seqNr' is an array (false).
     */
    public static boolean isArray_header_seqNr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqNr'
     */
    public static int offset_header_seqNr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqNr'
     */
    public static int offsetBits_header_seqNr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.seqNr'
     */
    public int get_header_seqNr() {
        return (int)getUIntBEElement(offsetBits_header_seqNr(), 16);
    }

    /**
     * Set the value of the field 'header.seqNr'
     */
    public void set_header_seqNr(int value) {
        setUIntBEElement(offsetBits_header_seqNr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqNr'
     */
    public static int size_header_seqNr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqNr'
     */
    public static int sizeBits_header_seqNr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.originatorID
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.originatorID' is signed (false).
     */
    public static boolean isSigned_header_originatorID() {
        return false;
    }

    /**
     * Return whether the field 'header.originatorID' is an array (false).
     */
    public static boolean isArray_header_originatorID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.originatorID'
     */
    public static int offset_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.originatorID'
     */
    public static int offsetBits_header_originatorID() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.originatorID'
     */
    public int get_header_originatorID() {
        return (int)getUIntBEElement(offsetBits_header_originatorID(), 16);
    }

    /**
     * Set the value of the field 'header.originatorID'
     */
    public void set_header_originatorID(int value) {
        setUIntBEElement(offsetBits_header_originatorID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.originatorID'
     */
    public static int size_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.originatorID'
     */
    public static int sizeBits_header_originatorID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.low
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.low' is signed (false).
     */
    public static boolean isSigned_header_aTime_low() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.low' is an array (false).
     */
    public static boolean isArray_header_aTime_low() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.low'
     */
    public static int offset_header_aTime_low() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.low'
     */
    public static int offsetBits_header_aTime_low() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'header.aTime.low'
     */
    public int get_header_aTime_low() {
        return (int)getUIntBEElement(offsetBits_header_aTime_low(), 16);
    }

    /**
     * Set the value of the field 'header.aTime.low'
     */
    public void set_header_aTime_low(int value) {
        setUIntBEElement(offsetBits_header_aTime_low(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.low'
     */
    public static int size_header_aTime_low() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.low'
     */
    public static int sizeBits_header_aTime_low() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.high
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.high' is signed (false).
     */
    public static boolean isSigned_header_aTime_high() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.high' is an array (false).
     */
    public static boolean isArray_header_aTime_high() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.high'
     */
    public static int offset_header_aTime_high() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.high'
     */
    public static int offsetBits_header_aTime_high() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'header.aTime.high'
     */
    public short get_header_aTime_high() {
        return (short)getUIntBEElement(offsetBits_header_aTime_high(), 8);
    }

    /**
     * Set the value of the field 'header.aTime.high'
     */
    public void set_header_aTime_high(short value) {
        setUIntBEElement(offsetBits_header_aTime_high(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.high'
     */
    public static int size_header_aTime_high() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.high'
     */
    public static int sizeBits_header_aTime_high() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.timeOfWeekMS
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.timeOfWeekMS' is signed (false).
     */
    public static boolean isSigned_payload_timeOfWeekMS() {
        return false;
    }

    /**
     * Return whether the field 'payload.timeOfWeekMS' is an array (false).
     */
    public static boolean isArray_payload_timeOfWeekMS() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.timeOfWeekMS'
     */
    public static int offset_payload_timeOfWeekMS() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.timeOfWeekMS'
     */
    public static int offsetBits_payload_timeOfWeekMS() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'payload.timeOfWeekMS'
     */
    public int get_payload_timeOfWeekMS() {
        return (int)getSIntElement(offsetBits_payload_timeOfWeekMS(), 32);
    }

    /**
     * Set the value of the field 'payload.timeOfWeekMS'
     */
    public void set_payload_timeOfWeekMS(int value) {
        setSIntElement(offsetBits_payload_timeOfWeekMS(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.timeOfWeekMS'
     */
    public static int size_payload_timeOfWeekMS() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.timeOfWeekMS'
     */
    public static int sizeBits_payload_timeOfWeekMS() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.weekNumber
    //   Field type: short
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.weekNumber' is signed (false).
     */
    public static boolean isSigned_payload_weekNumber() {
        return false;
    }

    /**
     * Return whether the field 'payload.weekNumber' is an array (false).
     */
    public static boolean isArray_payload_weekNumber() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.weekNumber'
     */
    public static int offset_payload_weekNumber() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.weekNumber'
     */
    public static int offsetBits_payload_weekNumber() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'payload.weekNumber'
     */
    public short get_payload_weekNumber() {
        return (short)getSIntElement(offsetBits_payload_weekNumber(), 16);
    }

    /**
     * Set the value of the field 'payload.weekNumber'
     */
    public void set_payload_weekNumber(short value) {
        setSIntElement(offsetBits_payload_weekNumber(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.weekNumber'
     */
    public static int size_payload_weekNumber() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.weekNumber'
     */
    public static int sizeBits_payload_weekNumber() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrierPhase_double_0
    //   Field type: short
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrierPhase_double_0' is signed (false).
     */
    public static boolean isSigned_payload_carrierPhase_double_0() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrierPhase_double_0' is an array (false).
     */
    public static boolean isArray_payload_carrierPhase_double_0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrierPhase_double_0'
     */
    public static int offset_payload_carrierPhase_double_0() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrierPhase_double_0'
     */
    public static int offsetBits_payload_carrierPhase_double_0() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrierPhase_double_0'
     */
    public short get_payload_carrierPhase_double_0() {
        return (short)getUIntBEElement(offsetBits_payload_carrierPhase_double_0(), 8);
    }

    /**
     * Set the value of the field 'payload.carrierPhase_double_0'
     */
    public void set_payload_carrierPhase_double_0(short value) {
        setUIntBEElement(offsetBits_payload_carrierPhase_double_0(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrierPhase_double_0'
     */
    public static int size_payload_carrierPhase_double_0() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrierPhase_double_0'
     */
    public static int sizeBits_payload_carrierPhase_double_0() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrierPhase_double_1
    //   Field type: short
    //   Offset (bits): 112
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrierPhase_double_1' is signed (false).
     */
    public static boolean isSigned_payload_carrierPhase_double_1() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrierPhase_double_1' is an array (false).
     */
    public static boolean isArray_payload_carrierPhase_double_1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrierPhase_double_1'
     */
    public static int offset_payload_carrierPhase_double_1() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrierPhase_double_1'
     */
    public static int offsetBits_payload_carrierPhase_double_1() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrierPhase_double_1'
     */
    public short get_payload_carrierPhase_double_1() {
        return (short)getUIntBEElement(offsetBits_payload_carrierPhase_double_1(), 8);
    }

    /**
     * Set the value of the field 'payload.carrierPhase_double_1'
     */
    public void set_payload_carrierPhase_double_1(short value) {
        setUIntBEElement(offsetBits_payload_carrierPhase_double_1(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrierPhase_double_1'
     */
    public static int size_payload_carrierPhase_double_1() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrierPhase_double_1'
     */
    public static int sizeBits_payload_carrierPhase_double_1() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrierPhase_double_2
    //   Field type: short
    //   Offset (bits): 120
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrierPhase_double_2' is signed (false).
     */
    public static boolean isSigned_payload_carrierPhase_double_2() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrierPhase_double_2' is an array (false).
     */
    public static boolean isArray_payload_carrierPhase_double_2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrierPhase_double_2'
     */
    public static int offset_payload_carrierPhase_double_2() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrierPhase_double_2'
     */
    public static int offsetBits_payload_carrierPhase_double_2() {
        return 120;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrierPhase_double_2'
     */
    public short get_payload_carrierPhase_double_2() {
        return (short)getUIntBEElement(offsetBits_payload_carrierPhase_double_2(), 8);
    }

    /**
     * Set the value of the field 'payload.carrierPhase_double_2'
     */
    public void set_payload_carrierPhase_double_2(short value) {
        setUIntBEElement(offsetBits_payload_carrierPhase_double_2(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrierPhase_double_2'
     */
    public static int size_payload_carrierPhase_double_2() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrierPhase_double_2'
     */
    public static int sizeBits_payload_carrierPhase_double_2() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrierPhase_double_3
    //   Field type: short
    //   Offset (bits): 128
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrierPhase_double_3' is signed (false).
     */
    public static boolean isSigned_payload_carrierPhase_double_3() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrierPhase_double_3' is an array (false).
     */
    public static boolean isArray_payload_carrierPhase_double_3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrierPhase_double_3'
     */
    public static int offset_payload_carrierPhase_double_3() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrierPhase_double_3'
     */
    public static int offsetBits_payload_carrierPhase_double_3() {
        return 128;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrierPhase_double_3'
     */
    public short get_payload_carrierPhase_double_3() {
        return (short)getUIntBEElement(offsetBits_payload_carrierPhase_double_3(), 8);
    }

    /**
     * Set the value of the field 'payload.carrierPhase_double_3'
     */
    public void set_payload_carrierPhase_double_3(short value) {
        setUIntBEElement(offsetBits_payload_carrierPhase_double_3(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrierPhase_double_3'
     */
    public static int size_payload_carrierPhase_double_3() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrierPhase_double_3'
     */
    public static int sizeBits_payload_carrierPhase_double_3() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrierPhase_double_4
    //   Field type: short
    //   Offset (bits): 136
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrierPhase_double_4' is signed (false).
     */
    public static boolean isSigned_payload_carrierPhase_double_4() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrierPhase_double_4' is an array (false).
     */
    public static boolean isArray_payload_carrierPhase_double_4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrierPhase_double_4'
     */
    public static int offset_payload_carrierPhase_double_4() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrierPhase_double_4'
     */
    public static int offsetBits_payload_carrierPhase_double_4() {
        return 136;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrierPhase_double_4'
     */
    public short get_payload_carrierPhase_double_4() {
        return (short)getUIntBEElement(offsetBits_payload_carrierPhase_double_4(), 8);
    }

    /**
     * Set the value of the field 'payload.carrierPhase_double_4'
     */
    public void set_payload_carrierPhase_double_4(short value) {
        setUIntBEElement(offsetBits_payload_carrierPhase_double_4(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrierPhase_double_4'
     */
    public static int size_payload_carrierPhase_double_4() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrierPhase_double_4'
     */
    public static int sizeBits_payload_carrierPhase_double_4() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrierPhase_double_5
    //   Field type: short
    //   Offset (bits): 144
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrierPhase_double_5' is signed (false).
     */
    public static boolean isSigned_payload_carrierPhase_double_5() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrierPhase_double_5' is an array (false).
     */
    public static boolean isArray_payload_carrierPhase_double_5() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrierPhase_double_5'
     */
    public static int offset_payload_carrierPhase_double_5() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrierPhase_double_5'
     */
    public static int offsetBits_payload_carrierPhase_double_5() {
        return 144;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrierPhase_double_5'
     */
    public short get_payload_carrierPhase_double_5() {
        return (short)getUIntBEElement(offsetBits_payload_carrierPhase_double_5(), 8);
    }

    /**
     * Set the value of the field 'payload.carrierPhase_double_5'
     */
    public void set_payload_carrierPhase_double_5(short value) {
        setUIntBEElement(offsetBits_payload_carrierPhase_double_5(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrierPhase_double_5'
     */
    public static int size_payload_carrierPhase_double_5() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrierPhase_double_5'
     */
    public static int sizeBits_payload_carrierPhase_double_5() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrierPhase_double_6
    //   Field type: short
    //   Offset (bits): 152
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrierPhase_double_6' is signed (false).
     */
    public static boolean isSigned_payload_carrierPhase_double_6() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrierPhase_double_6' is an array (false).
     */
    public static boolean isArray_payload_carrierPhase_double_6() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrierPhase_double_6'
     */
    public static int offset_payload_carrierPhase_double_6() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrierPhase_double_6'
     */
    public static int offsetBits_payload_carrierPhase_double_6() {
        return 152;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrierPhase_double_6'
     */
    public short get_payload_carrierPhase_double_6() {
        return (short)getUIntBEElement(offsetBits_payload_carrierPhase_double_6(), 8);
    }

    /**
     * Set the value of the field 'payload.carrierPhase_double_6'
     */
    public void set_payload_carrierPhase_double_6(short value) {
        setUIntBEElement(offsetBits_payload_carrierPhase_double_6(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrierPhase_double_6'
     */
    public static int size_payload_carrierPhase_double_6() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrierPhase_double_6'
     */
    public static int sizeBits_payload_carrierPhase_double_6() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrierPhase_double_7
    //   Field type: short
    //   Offset (bits): 160
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrierPhase_double_7' is signed (false).
     */
    public static boolean isSigned_payload_carrierPhase_double_7() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrierPhase_double_7' is an array (false).
     */
    public static boolean isArray_payload_carrierPhase_double_7() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrierPhase_double_7'
     */
    public static int offset_payload_carrierPhase_double_7() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrierPhase_double_7'
     */
    public static int offsetBits_payload_carrierPhase_double_7() {
        return 160;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrierPhase_double_7'
     */
    public short get_payload_carrierPhase_double_7() {
        return (short)getUIntBEElement(offsetBits_payload_carrierPhase_double_7(), 8);
    }

    /**
     * Set the value of the field 'payload.carrierPhase_double_7'
     */
    public void set_payload_carrierPhase_double_7(short value) {
        setUIntBEElement(offsetBits_payload_carrierPhase_double_7(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrierPhase_double_7'
     */
    public static int size_payload_carrierPhase_double_7() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrierPhase_double_7'
     */
    public static int sizeBits_payload_carrierPhase_double_7() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudoRange_double_0
    //   Field type: short
    //   Offset (bits): 168
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudoRange_double_0' is signed (false).
     */
    public static boolean isSigned_payload_pseudoRange_double_0() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudoRange_double_0' is an array (false).
     */
    public static boolean isArray_payload_pseudoRange_double_0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudoRange_double_0'
     */
    public static int offset_payload_pseudoRange_double_0() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudoRange_double_0'
     */
    public static int offsetBits_payload_pseudoRange_double_0() {
        return 168;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudoRange_double_0'
     */
    public short get_payload_pseudoRange_double_0() {
        return (short)getUIntBEElement(offsetBits_payload_pseudoRange_double_0(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudoRange_double_0'
     */
    public void set_payload_pseudoRange_double_0(short value) {
        setUIntBEElement(offsetBits_payload_pseudoRange_double_0(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudoRange_double_0'
     */
    public static int size_payload_pseudoRange_double_0() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudoRange_double_0'
     */
    public static int sizeBits_payload_pseudoRange_double_0() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudoRange_double_1
    //   Field type: short
    //   Offset (bits): 176
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudoRange_double_1' is signed (false).
     */
    public static boolean isSigned_payload_pseudoRange_double_1() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudoRange_double_1' is an array (false).
     */
    public static boolean isArray_payload_pseudoRange_double_1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudoRange_double_1'
     */
    public static int offset_payload_pseudoRange_double_1() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudoRange_double_1'
     */
    public static int offsetBits_payload_pseudoRange_double_1() {
        return 176;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudoRange_double_1'
     */
    public short get_payload_pseudoRange_double_1() {
        return (short)getUIntBEElement(offsetBits_payload_pseudoRange_double_1(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudoRange_double_1'
     */
    public void set_payload_pseudoRange_double_1(short value) {
        setUIntBEElement(offsetBits_payload_pseudoRange_double_1(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudoRange_double_1'
     */
    public static int size_payload_pseudoRange_double_1() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudoRange_double_1'
     */
    public static int sizeBits_payload_pseudoRange_double_1() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudoRange_double_2
    //   Field type: short
    //   Offset (bits): 184
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudoRange_double_2' is signed (false).
     */
    public static boolean isSigned_payload_pseudoRange_double_2() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudoRange_double_2' is an array (false).
     */
    public static boolean isArray_payload_pseudoRange_double_2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudoRange_double_2'
     */
    public static int offset_payload_pseudoRange_double_2() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudoRange_double_2'
     */
    public static int offsetBits_payload_pseudoRange_double_2() {
        return 184;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudoRange_double_2'
     */
    public short get_payload_pseudoRange_double_2() {
        return (short)getUIntBEElement(offsetBits_payload_pseudoRange_double_2(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudoRange_double_2'
     */
    public void set_payload_pseudoRange_double_2(short value) {
        setUIntBEElement(offsetBits_payload_pseudoRange_double_2(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudoRange_double_2'
     */
    public static int size_payload_pseudoRange_double_2() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudoRange_double_2'
     */
    public static int sizeBits_payload_pseudoRange_double_2() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudoRange_double_3
    //   Field type: short
    //   Offset (bits): 192
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudoRange_double_3' is signed (false).
     */
    public static boolean isSigned_payload_pseudoRange_double_3() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudoRange_double_3' is an array (false).
     */
    public static boolean isArray_payload_pseudoRange_double_3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudoRange_double_3'
     */
    public static int offset_payload_pseudoRange_double_3() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudoRange_double_3'
     */
    public static int offsetBits_payload_pseudoRange_double_3() {
        return 192;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudoRange_double_3'
     */
    public short get_payload_pseudoRange_double_3() {
        return (short)getUIntBEElement(offsetBits_payload_pseudoRange_double_3(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudoRange_double_3'
     */
    public void set_payload_pseudoRange_double_3(short value) {
        setUIntBEElement(offsetBits_payload_pseudoRange_double_3(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudoRange_double_3'
     */
    public static int size_payload_pseudoRange_double_3() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudoRange_double_3'
     */
    public static int sizeBits_payload_pseudoRange_double_3() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudoRange_double_4
    //   Field type: short
    //   Offset (bits): 200
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudoRange_double_4' is signed (false).
     */
    public static boolean isSigned_payload_pseudoRange_double_4() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudoRange_double_4' is an array (false).
     */
    public static boolean isArray_payload_pseudoRange_double_4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudoRange_double_4'
     */
    public static int offset_payload_pseudoRange_double_4() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudoRange_double_4'
     */
    public static int offsetBits_payload_pseudoRange_double_4() {
        return 200;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudoRange_double_4'
     */
    public short get_payload_pseudoRange_double_4() {
        return (short)getUIntBEElement(offsetBits_payload_pseudoRange_double_4(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudoRange_double_4'
     */
    public void set_payload_pseudoRange_double_4(short value) {
        setUIntBEElement(offsetBits_payload_pseudoRange_double_4(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudoRange_double_4'
     */
    public static int size_payload_pseudoRange_double_4() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudoRange_double_4'
     */
    public static int sizeBits_payload_pseudoRange_double_4() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudoRange_double_5
    //   Field type: short
    //   Offset (bits): 208
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudoRange_double_5' is signed (false).
     */
    public static boolean isSigned_payload_pseudoRange_double_5() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudoRange_double_5' is an array (false).
     */
    public static boolean isArray_payload_pseudoRange_double_5() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudoRange_double_5'
     */
    public static int offset_payload_pseudoRange_double_5() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudoRange_double_5'
     */
    public static int offsetBits_payload_pseudoRange_double_5() {
        return 208;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudoRange_double_5'
     */
    public short get_payload_pseudoRange_double_5() {
        return (short)getUIntBEElement(offsetBits_payload_pseudoRange_double_5(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudoRange_double_5'
     */
    public void set_payload_pseudoRange_double_5(short value) {
        setUIntBEElement(offsetBits_payload_pseudoRange_double_5(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudoRange_double_5'
     */
    public static int size_payload_pseudoRange_double_5() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudoRange_double_5'
     */
    public static int sizeBits_payload_pseudoRange_double_5() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudoRange_double_6
    //   Field type: short
    //   Offset (bits): 216
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudoRange_double_6' is signed (false).
     */
    public static boolean isSigned_payload_pseudoRange_double_6() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudoRange_double_6' is an array (false).
     */
    public static boolean isArray_payload_pseudoRange_double_6() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudoRange_double_6'
     */
    public static int offset_payload_pseudoRange_double_6() {
        return (216 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudoRange_double_6'
     */
    public static int offsetBits_payload_pseudoRange_double_6() {
        return 216;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudoRange_double_6'
     */
    public short get_payload_pseudoRange_double_6() {
        return (short)getUIntBEElement(offsetBits_payload_pseudoRange_double_6(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudoRange_double_6'
     */
    public void set_payload_pseudoRange_double_6(short value) {
        setUIntBEElement(offsetBits_payload_pseudoRange_double_6(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudoRange_double_6'
     */
    public static int size_payload_pseudoRange_double_6() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudoRange_double_6'
     */
    public static int sizeBits_payload_pseudoRange_double_6() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudoRange_double_7
    //   Field type: short
    //   Offset (bits): 224
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudoRange_double_7' is signed (false).
     */
    public static boolean isSigned_payload_pseudoRange_double_7() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudoRange_double_7' is an array (false).
     */
    public static boolean isArray_payload_pseudoRange_double_7() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudoRange_double_7'
     */
    public static int offset_payload_pseudoRange_double_7() {
        return (224 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudoRange_double_7'
     */
    public static int offsetBits_payload_pseudoRange_double_7() {
        return 224;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudoRange_double_7'
     */
    public short get_payload_pseudoRange_double_7() {
        return (short)getUIntBEElement(offsetBits_payload_pseudoRange_double_7(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudoRange_double_7'
     */
    public void set_payload_pseudoRange_double_7(short value) {
        setUIntBEElement(offsetBits_payload_pseudoRange_double_7(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudoRange_double_7'
     */
    public static int size_payload_pseudoRange_double_7() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudoRange_double_7'
     */
    public static int sizeBits_payload_pseudoRange_double_7() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.doppler_single_0
    //   Field type: short
    //   Offset (bits): 232
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.doppler_single_0' is signed (false).
     */
    public static boolean isSigned_payload_doppler_single_0() {
        return false;
    }

    /**
     * Return whether the field 'payload.doppler_single_0' is an array (false).
     */
    public static boolean isArray_payload_doppler_single_0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.doppler_single_0'
     */
    public static int offset_payload_doppler_single_0() {
        return (232 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.doppler_single_0'
     */
    public static int offsetBits_payload_doppler_single_0() {
        return 232;
    }

    /**
     * Return the value (as a short) of the field 'payload.doppler_single_0'
     */
    public short get_payload_doppler_single_0() {
        return (short)getUIntBEElement(offsetBits_payload_doppler_single_0(), 8);
    }

    /**
     * Set the value of the field 'payload.doppler_single_0'
     */
    public void set_payload_doppler_single_0(short value) {
        setUIntBEElement(offsetBits_payload_doppler_single_0(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.doppler_single_0'
     */
    public static int size_payload_doppler_single_0() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.doppler_single_0'
     */
    public static int sizeBits_payload_doppler_single_0() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.doppler_single_1
    //   Field type: short
    //   Offset (bits): 240
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.doppler_single_1' is signed (false).
     */
    public static boolean isSigned_payload_doppler_single_1() {
        return false;
    }

    /**
     * Return whether the field 'payload.doppler_single_1' is an array (false).
     */
    public static boolean isArray_payload_doppler_single_1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.doppler_single_1'
     */
    public static int offset_payload_doppler_single_1() {
        return (240 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.doppler_single_1'
     */
    public static int offsetBits_payload_doppler_single_1() {
        return 240;
    }

    /**
     * Return the value (as a short) of the field 'payload.doppler_single_1'
     */
    public short get_payload_doppler_single_1() {
        return (short)getUIntBEElement(offsetBits_payload_doppler_single_1(), 8);
    }

    /**
     * Set the value of the field 'payload.doppler_single_1'
     */
    public void set_payload_doppler_single_1(short value) {
        setUIntBEElement(offsetBits_payload_doppler_single_1(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.doppler_single_1'
     */
    public static int size_payload_doppler_single_1() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.doppler_single_1'
     */
    public static int sizeBits_payload_doppler_single_1() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.doppler_single_2
    //   Field type: short
    //   Offset (bits): 248
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.doppler_single_2' is signed (false).
     */
    public static boolean isSigned_payload_doppler_single_2() {
        return false;
    }

    /**
     * Return whether the field 'payload.doppler_single_2' is an array (false).
     */
    public static boolean isArray_payload_doppler_single_2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.doppler_single_2'
     */
    public static int offset_payload_doppler_single_2() {
        return (248 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.doppler_single_2'
     */
    public static int offsetBits_payload_doppler_single_2() {
        return 248;
    }

    /**
     * Return the value (as a short) of the field 'payload.doppler_single_2'
     */
    public short get_payload_doppler_single_2() {
        return (short)getUIntBEElement(offsetBits_payload_doppler_single_2(), 8);
    }

    /**
     * Set the value of the field 'payload.doppler_single_2'
     */
    public void set_payload_doppler_single_2(short value) {
        setUIntBEElement(offsetBits_payload_doppler_single_2(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.doppler_single_2'
     */
    public static int size_payload_doppler_single_2() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.doppler_single_2'
     */
    public static int sizeBits_payload_doppler_single_2() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.doppler_single_3
    //   Field type: short
    //   Offset (bits): 256
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.doppler_single_3' is signed (false).
     */
    public static boolean isSigned_payload_doppler_single_3() {
        return false;
    }

    /**
     * Return whether the field 'payload.doppler_single_3' is an array (false).
     */
    public static boolean isArray_payload_doppler_single_3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.doppler_single_3'
     */
    public static int offset_payload_doppler_single_3() {
        return (256 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.doppler_single_3'
     */
    public static int offsetBits_payload_doppler_single_3() {
        return 256;
    }

    /**
     * Return the value (as a short) of the field 'payload.doppler_single_3'
     */
    public short get_payload_doppler_single_3() {
        return (short)getUIntBEElement(offsetBits_payload_doppler_single_3(), 8);
    }

    /**
     * Set the value of the field 'payload.doppler_single_3'
     */
    public void set_payload_doppler_single_3(short value) {
        setUIntBEElement(offsetBits_payload_doppler_single_3(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.doppler_single_3'
     */
    public static int size_payload_doppler_single_3() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.doppler_single_3'
     */
    public static int sizeBits_payload_doppler_single_3() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.vehicleNum
    //   Field type: short
    //   Offset (bits): 264
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.vehicleNum' is signed (false).
     */
    public static boolean isSigned_payload_vehicleNum() {
        return false;
    }

    /**
     * Return whether the field 'payload.vehicleNum' is an array (false).
     */
    public static boolean isArray_payload_vehicleNum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.vehicleNum'
     */
    public static int offset_payload_vehicleNum() {
        return (264 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.vehicleNum'
     */
    public static int offsetBits_payload_vehicleNum() {
        return 264;
    }

    /**
     * Return the value (as a short) of the field 'payload.vehicleNum'
     */
    public short get_payload_vehicleNum() {
        return (short)getUIntBEElement(offsetBits_payload_vehicleNum(), 8);
    }

    /**
     * Set the value of the field 'payload.vehicleNum'
     */
    public void set_payload_vehicleNum(short value) {
        setUIntBEElement(offsetBits_payload_vehicleNum(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.vehicleNum'
     */
    public static int size_payload_vehicleNum() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.vehicleNum'
     */
    public static int sizeBits_payload_vehicleNum() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.measIndicator
    //   Field type: short
    //   Offset (bits): 272
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.measIndicator' is signed (false).
     */
    public static boolean isSigned_payload_measIndicator() {
        return false;
    }

    /**
     * Return whether the field 'payload.measIndicator' is an array (false).
     */
    public static boolean isArray_payload_measIndicator() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.measIndicator'
     */
    public static int offset_payload_measIndicator() {
        return (272 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.measIndicator'
     */
    public static int offsetBits_payload_measIndicator() {
        return 272;
    }

    /**
     * Return the value (as a short) of the field 'payload.measIndicator'
     */
    public short get_payload_measIndicator() {
        return (short)getUIntBEElement(offsetBits_payload_measIndicator(), 8);
    }

    /**
     * Set the value of the field 'payload.measIndicator'
     */
    public void set_payload_measIndicator(short value) {
        setUIntBEElement(offsetBits_payload_measIndicator(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.measIndicator'
     */
    public static int size_payload_measIndicator() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.measIndicator'
     */
    public static int sizeBits_payload_measIndicator() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.signalStrength
    //   Field type: short
    //   Offset (bits): 280
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.signalStrength' is signed (false).
     */
    public static boolean isSigned_payload_signalStrength() {
        return false;
    }

    /**
     * Return whether the field 'payload.signalStrength' is an array (false).
     */
    public static boolean isArray_payload_signalStrength() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.signalStrength'
     */
    public static int offset_payload_signalStrength() {
        return (280 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.signalStrength'
     */
    public static int offsetBits_payload_signalStrength() {
        return 280;
    }

    /**
     * Return the value (as a short) of the field 'payload.signalStrength'
     */
    public short get_payload_signalStrength() {
        return (short)getUIntBEElement(offsetBits_payload_signalStrength(), 8);
    }

    /**
     * Set the value of the field 'payload.signalStrength'
     */
    public void set_payload_signalStrength(short value) {
        setUIntBEElement(offsetBits_payload_signalStrength(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.signalStrength'
     */
    public static int size_payload_signalStrength() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.signalStrength'
     */
    public static int sizeBits_payload_signalStrength() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.lossLockIndicator
    //   Field type: short
    //   Offset (bits): 288
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.lossLockIndicator' is signed (false).
     */
    public static boolean isSigned_payload_lossLockIndicator() {
        return false;
    }

    /**
     * Return whether the field 'payload.lossLockIndicator' is an array (false).
     */
    public static boolean isArray_payload_lossLockIndicator() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.lossLockIndicator'
     */
    public static int offset_payload_lossLockIndicator() {
        return (288 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.lossLockIndicator'
     */
    public static int offsetBits_payload_lossLockIndicator() {
        return 288;
    }

    /**
     * Return the value (as a short) of the field 'payload.lossLockIndicator'
     */
    public short get_payload_lossLockIndicator() {
        return (short)getUIntBEElement(offsetBits_payload_lossLockIndicator(), 8);
    }

    /**
     * Set the value of the field 'payload.lossLockIndicator'
     */
    public void set_payload_lossLockIndicator(short value) {
        setUIntBEElement(offsetBits_payload_lossLockIndicator(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.lossLockIndicator'
     */
    public static int size_payload_lossLockIndicator() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.lossLockIndicator'
     */
    public static int sizeBits_payload_lossLockIndicator() {
        return 8;
    }

}
