/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DozerRssiMsg'
 * message type.
 */

 package ch.epfl.gsn.wrappers.backlog.plugins.tinyos2x;

public class DozerRssiMsg extends DataHeaderMsg {

    /** The default size of this message type in bytes. */
//    public static final int DEFAULT_MESSAGE_SIZE = 28;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 154;

    /** Create a new DozerRssiMsg of size 28. */
    public DozerRssiMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DozerRssiMsg of the given data_length. */
    public DozerRssiMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerRssiMsg with the given data_length
     * and base offset.
     */
    public DozerRssiMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerRssiMsg using the given byte array
     * as backing store.
     */
    public DozerRssiMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerRssiMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DozerRssiMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerRssiMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DozerRssiMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerRssiMsg embedded in the given message
     * at the given base offset.
     */
    public DozerRssiMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerRssiMsg embedded in the given message
     * at the given base offset and length.
     */
    public DozerRssiMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DozerRssiMsg> \n";
      try {
        s += "  [header.seqNr=0x"+Long.toHexString(get_header_seqNr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.originatorID=0x"+Long.toHexString(get_header_originatorID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.low=0x"+Long.toHexString(get_header_aTime_low())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.high=0x"+Long.toHexString(get_header_aTime_high())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.rssi.id=";
        for (int i = 0; i < 7; i++) {
          s += getElement_payload_rssi_id(i)==null?"null ":"0x"+Long.toHexString(getElement_payload_rssi_id(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.rssi.rssi=";
        for (int i = 0; i < 7; i++) {
          s += getElement_payload_rssi_rssi(i)==null?"null ":"0x"+Long.toHexString(getElement_payload_rssi_rssi(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqNr
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqNr' is signed (false).
     */
    public static boolean isSigned_header_seqNr() {
        return false;
    }

    /**
     * Return whether the field 'header.seqNr' is an array (false).
     */
    public static boolean isArray_header_seqNr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqNr'
     */
    public static int offset_header_seqNr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqNr'
     */
    public static int offsetBits_header_seqNr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.seqNr'
     */
    public int get_header_seqNr() {
        return (int)getUIntBEElement(offsetBits_header_seqNr(), 16);
    }

    /**
     * Set the value of the field 'header.seqNr'
     */
    public void set_header_seqNr(int value) {
        setUIntBEElement(offsetBits_header_seqNr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqNr'
     */
    public static int size_header_seqNr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqNr'
     */
    public static int sizeBits_header_seqNr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.originatorID
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.originatorID' is signed (false).
     */
    public static boolean isSigned_header_originatorID() {
        return false;
    }

    /**
     * Return whether the field 'header.originatorID' is an array (false).
     */
    public static boolean isArray_header_originatorID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.originatorID'
     */
    public static int offset_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.originatorID'
     */
    public static int offsetBits_header_originatorID() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.originatorID'
     */
    public int get_header_originatorID() {
        return (int)getUIntBEElement(offsetBits_header_originatorID(), 16);
    }

    /**
     * Set the value of the field 'header.originatorID'
     */
    public void set_header_originatorID(int value) {
        setUIntBEElement(offsetBits_header_originatorID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.originatorID'
     */
    public static int size_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.originatorID'
     */
    public static int sizeBits_header_originatorID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.low
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.low' is signed (false).
     */
    public static boolean isSigned_header_aTime_low() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.low' is an array (false).
     */
    public static boolean isArray_header_aTime_low() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.low'
     */
    public static int offset_header_aTime_low() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.low'
     */
    public static int offsetBits_header_aTime_low() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'header.aTime.low'
     */
    public int get_header_aTime_low() {
        return (int)getUIntBEElement(offsetBits_header_aTime_low(), 16);
    }

    /**
     * Set the value of the field 'header.aTime.low'
     */
    public void set_header_aTime_low(int value) {
        setUIntBEElement(offsetBits_header_aTime_low(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.low'
     */
    public static int size_header_aTime_low() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.low'
     */
    public static int sizeBits_header_aTime_low() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.high
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.high' is signed (false).
     */
    public static boolean isSigned_header_aTime_high() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.high' is an array (false).
     */
    public static boolean isArray_header_aTime_high() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.high'
     */
    public static int offset_header_aTime_high() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.high'
     */
    public static int offsetBits_header_aTime_high() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'header.aTime.high'
     */
    public short get_header_aTime_high() {
        return (short)getUIntBEElement(offsetBits_header_aTime_high(), 8);
    }

    /**
     * Set the value of the field 'header.aTime.high'
     */
    public void set_header_aTime_high(short value) {
        setUIntBEElement(offsetBits_header_aTime_high(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.high'
     */
    public static int size_header_aTime_high() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.high'
     */
    public static int sizeBits_header_aTime_high() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.rssi.id
    //   Field type: int[]
    //   Offset (bits): 0
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.rssi.id' is signed (false).
     */
    public static boolean isSigned_payload_rssi_id() {
        return false;
    }

    /**
     * Return whether the field 'payload.rssi.id' is an array (true).
     */
    public static boolean isArray_payload_rssi_id() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.rssi.id'
     */
    public static int offset_payload_rssi_id(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 7) throw new ArrayIndexOutOfBoundsException();
        offset += 56 + index1 * 24;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.rssi.id'
     */
    public static int offsetBits_payload_rssi_id(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 7) throw new ArrayIndexOutOfBoundsException();
        offset += 56 + index1 * 24;
        return offset;
    }

    /**
     * Return the entire array 'payload.rssi.id' as a int[]
     */
    public Integer[] get_payload_rssi_id() {
        Integer[] tmp = new Integer[7];
        for (int index0 = 0; index0 < numElements_payload_rssi_id(0); index0++) {
            tmp[index0] = getElement_payload_rssi_id(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'payload.rssi.id' from the given int[]
     */
    public void set_payload_rssi_id(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_payload_rssi_id(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'payload.rssi.id'
     */
    public Integer getElement_payload_rssi_id(int index1) {
        try {return (int)getUIntBEElement(offsetBits_payload_rssi_id(index1), 16);} catch (IndexOutOfBoundsException e) { return null; }
    }

    /**
     * Set an element of the array 'payload.rssi.id'
     */
    public void setElement_payload_rssi_id(int index1, int value) {
        setUIntBEElement(offsetBits_payload_rssi_id(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'payload.rssi.id'
     */
    public static int totalSize_payload_rssi_id() {
        return (168 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'payload.rssi.id'
     */
    public static int totalSizeBits_payload_rssi_id() {
        return 168;
    }

    /**
     * Return the size, in bytes, of each element of the array 'payload.rssi.id'
     */
    public static int elementSize_payload_rssi_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'payload.rssi.id'
     */
    public static int elementSizeBits_payload_rssi_id() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'payload.rssi.id'
     */
    public static int numDimensions_payload_rssi_id() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'payload.rssi.id'
     */
    public static int numElements_payload_rssi_id() {
        return 7;
    }

    /**
     * Return the number of elements in the array 'payload.rssi.id'
     * for the given dimension.
     */
    public static int numElements_payload_rssi_id(int dimension) {
      int array_dims[] = { 7,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.rssi.rssi
    //   Field type: short[]
    //   Offset (bits): 16
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.rssi.rssi' is signed (false).
     */
    public static boolean isSigned_payload_rssi_rssi() {
        return false;
    }

    /**
     * Return whether the field 'payload.rssi.rssi' is an array (true).
     */
    public static boolean isArray_payload_rssi_rssi() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.rssi.rssi'
     */
    public static int offset_payload_rssi_rssi(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 7) throw new ArrayIndexOutOfBoundsException();
        offset += 56 + index1 * 24;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.rssi.rssi'
     */
    public static int offsetBits_payload_rssi_rssi(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 7) throw new ArrayIndexOutOfBoundsException();
        offset += 56 + index1 * 24;
        return offset;
    }

    /**
     * Return the entire array 'payload.rssi.rssi' as a short[]
     */
    public Short[] get_payload_rssi_rssi() {
        Short[] tmp = new Short[7];
        for (int index0 = 0; index0 < numElements_payload_rssi_rssi(0); index0++) {
            tmp[index0] = getElement_payload_rssi_rssi(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'payload.rssi.rssi' from the given short[]
     */
    public void set_payload_rssi_rssi(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_payload_rssi_rssi(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'payload.rssi.rssi'
     */
    public Short getElement_payload_rssi_rssi(int index1) {
        try {return (short)getUIntBEElement(offsetBits_payload_rssi_rssi(index1), 8);} catch (IndexOutOfBoundsException e) { return null; }
    }

    /**
     * Set an element of the array 'payload.rssi.rssi'
     */
    public void setElement_payload_rssi_rssi(int index1, short value) {
        setUIntBEElement(offsetBits_payload_rssi_rssi(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'payload.rssi.rssi'
     */
    public static int totalSize_payload_rssi_rssi() {
        return (168 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'payload.rssi.rssi'
     */
    public static int totalSizeBits_payload_rssi_rssi() {
        return 168;
    }

    /**
     * Return the size, in bytes, of each element of the array 'payload.rssi.rssi'
     */
    public static int elementSize_payload_rssi_rssi() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'payload.rssi.rssi'
     */
    public static int elementSizeBits_payload_rssi_rssi() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'payload.rssi.rssi'
     */
    public static int numDimensions_payload_rssi_rssi() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'payload.rssi.rssi'
     */
    public static int numElements_payload_rssi_rssi() {
        return 7;
    }

    /**
     * Return the number of elements in the array 'payload.rssi.rssi'
     * for the given dimension.
     */
    public static int numElements_payload_rssi_rssi(int dimension) {
      int array_dims[] = { 7,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'payload.rssi.rssi' with a String
     */
    public void setString_payload_rssi_rssi(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_payload_rssi_rssi(i, (short)s.charAt(i));
         }
         setElement_payload_rssi_rssi(i, (short)0); //null terminate
    }

    /**
     * Read the array 'payload.rssi.rssi' as a String
     */
    public String getString_payload_rssi_rssi() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,7)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_payload_rssi_rssi(i).shortValue() == (char)0) break;
             carr[i] = (char)getElement_payload_rssi_rssi(i).shortValue();
         }
         return new String(carr,0,i);
    }

}
