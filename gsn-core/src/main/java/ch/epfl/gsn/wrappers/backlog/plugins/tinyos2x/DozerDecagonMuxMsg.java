/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DozerDecagonMuxMsg'
 * message type.
 */

 package ch.epfl.gsn.wrappers.backlog.plugins.tinyos2x;

public class DozerDecagonMuxMsg extends DataHeaderMsg {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 30;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 160;

    /** Create a new DozerDecagonMuxMsg of size 30. */
    public DozerDecagonMuxMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DozerDecagonMuxMsg of the given data_length. */
    public DozerDecagonMuxMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDecagonMuxMsg with the given data_length
     * and base offset.
     */
    public DozerDecagonMuxMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDecagonMuxMsg using the given byte array
     * as backing store.
     */
    public DozerDecagonMuxMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDecagonMuxMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DozerDecagonMuxMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDecagonMuxMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DozerDecagonMuxMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDecagonMuxMsg embedded in the given message
     * at the given base offset.
     */
    public DozerDecagonMuxMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDecagonMuxMsg embedded in the given message
     * at the given base offset and length.
     */
    public DozerDecagonMuxMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DozerDecagonMuxMsg> \n";
      try {
        s += "  [header.seqNr=0x"+Long.toHexString(get_header_seqNr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.originatorID=0x"+Long.toHexString(get_header_originatorID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.low=0x"+Long.toHexString(get_header_aTime_low())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.high=0x"+Long.toHexString(get_header_aTime_high())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.sample.valid=0x"+Long.toHexString(get_payload_sample_valid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.sample.no=0x"+Long.toHexString(get_payload_sample_no())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.mux_valid7=0x"+Long.toHexString(get_payload_mux_valid7())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.mux_valid6=0x"+Long.toHexString(get_payload_mux_valid6())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.mux_valid5=0x"+Long.toHexString(get_payload_mux_valid5())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.mux_valid4=0x"+Long.toHexString(get_payload_mux_valid4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.mux_valid3=0x"+Long.toHexString(get_payload_mux_valid3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.mux_valid2=0x"+Long.toHexString(get_payload_mux_valid2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.mux_valid1=0x"+Long.toHexString(get_payload_mux_valid1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.mux_valid0=0x"+Long.toHexString(get_payload_mux_valid0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.data.dielectric=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_payload_data_dielectric(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.data.conductivity=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_payload_data_conductivity(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.data.temperature=";
        for (int i = 0; i < 5; i++) {
          s += "0x"+Long.toHexString(getElement_payload_data_temperature(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqNr
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqNr' is signed (false).
     */
    public static boolean isSigned_header_seqNr() {
        return false;
    }

    /**
     * Return whether the field 'header.seqNr' is an array (false).
     */
    public static boolean isArray_header_seqNr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqNr'
     */
    public static int offset_header_seqNr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqNr'
     */
    public static int offsetBits_header_seqNr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.seqNr'
     */
    public int get_header_seqNr() {
        return (int)getUIntBEElement(offsetBits_header_seqNr(), 16);
    }

    /**
     * Set the value of the field 'header.seqNr'
     */
    public void set_header_seqNr(int value) {
        setUIntBEElement(offsetBits_header_seqNr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqNr'
     */
    public static int size_header_seqNr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqNr'
     */
    public static int sizeBits_header_seqNr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.originatorID
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.originatorID' is signed (false).
     */
    public static boolean isSigned_header_originatorID() {
        return false;
    }

    /**
     * Return whether the field 'header.originatorID' is an array (false).
     */
    public static boolean isArray_header_originatorID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.originatorID'
     */
    public static int offset_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.originatorID'
     */
    public static int offsetBits_header_originatorID() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.originatorID'
     */
    public int get_header_originatorID() {
        return (int)getUIntBEElement(offsetBits_header_originatorID(), 16);
    }

    /**
     * Set the value of the field 'header.originatorID'
     */
    public void set_header_originatorID(int value) {
        setUIntBEElement(offsetBits_header_originatorID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.originatorID'
     */
    public static int size_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.originatorID'
     */
    public static int sizeBits_header_originatorID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.low
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.low' is signed (false).
     */
    public static boolean isSigned_header_aTime_low() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.low' is an array (false).
     */
    public static boolean isArray_header_aTime_low() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.low'
     */
    public static int offset_header_aTime_low() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.low'
     */
    public static int offsetBits_header_aTime_low() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'header.aTime.low'
     */
    public int get_header_aTime_low() {
        return (int)getUIntBEElement(offsetBits_header_aTime_low(), 16);
    }

    /**
     * Set the value of the field 'header.aTime.low'
     */
    public void set_header_aTime_low(int value) {
        setUIntBEElement(offsetBits_header_aTime_low(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.low'
     */
    public static int size_header_aTime_low() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.low'
     */
    public static int sizeBits_header_aTime_low() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.high
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.high' is signed (false).
     */
    public static boolean isSigned_header_aTime_high() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.high' is an array (false).
     */
    public static boolean isArray_header_aTime_high() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.high'
     */
    public static int offset_header_aTime_high() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.high'
     */
    public static int offsetBits_header_aTime_high() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'header.aTime.high'
     */
    public short get_header_aTime_high() {
        return (short)getUIntBEElement(offsetBits_header_aTime_high(), 8);
    }

    /**
     * Set the value of the field 'header.aTime.high'
     */
    public void set_header_aTime_high(short value) {
        setUIntBEElement(offsetBits_header_aTime_high(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.high'
     */
    public static int size_header_aTime_high() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.high'
     */
    public static int sizeBits_header_aTime_high() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.sample.valid
    //   Field type: byte
    //   Offset (bits): 56
    //   Size (bits): 1
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.sample.valid' is signed (false).
     */
    public static boolean isSigned_payload_sample_valid() {
        return false;
    }

    /**
     * Return whether the field 'payload.sample.valid' is an array (false).
     */
    public static boolean isArray_payload_sample_valid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.sample.valid'
     */
    public static int offset_payload_sample_valid() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.sample.valid'
     */
    public static int offsetBits_payload_sample_valid() {
        return 56;
    }

    /**
     * Return the value (as a byte) of the field 'payload.sample.valid'
     */
    public byte get_payload_sample_valid() {
        return (byte)getUIntBEElement(offsetBits_payload_sample_valid(), 1);
    }

    /**
     * Set the value of the field 'payload.sample.valid'
     */
    public void set_payload_sample_valid(byte value) {
        setUIntBEElement(offsetBits_payload_sample_valid(), 1, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.sample.valid'
     * WARNING: This field is not an even-sized number of bytes (1 bits).
     */
    public static int size_payload_sample_valid() {
        return (1 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.sample.valid'
     */
    public static int sizeBits_payload_sample_valid() {
        return 1;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.sample.no
    //   Field type: short
    //   Offset (bits): 57
    //   Size (bits): 15
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.sample.no' is signed (false).
     */
    public static boolean isSigned_payload_sample_no() {
        return false;
    }

    /**
     * Return whether the field 'payload.sample.no' is an array (false).
     */
    public static boolean isArray_payload_sample_no() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.sample.no'
     * WARNING: This field is not byte-aligned (bit offset 57).
     */
    public static int offset_payload_sample_no() {
        return (57 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.sample.no'
     */
    public static int offsetBits_payload_sample_no() {
        return 57;
    }

    /**
     * Return the value (as a short) of the field 'payload.sample.no'
     */
    public short get_payload_sample_no() {
        return (short)getUIntBEElement(offsetBits_payload_sample_no(), 15);
    }

    /**
     * Set the value of the field 'payload.sample.no'
     */
    public void set_payload_sample_no(short value) {
        setUIntBEElement(offsetBits_payload_sample_no(), 15, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.sample.no'
     * WARNING: This field is not an even-sized number of bytes (15 bits).
     */
    public static int size_payload_sample_no() {
        return (15 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.sample.no'
     */
    public static int sizeBits_payload_sample_no() {
        return 15;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.mux_valid7
    //   Field type: byte
    //   Offset (bits): 72
    //   Size (bits): 1
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.mux_valid7' is signed (false).
     */
    public static boolean isSigned_payload_mux_valid7() {
        return false;
    }

    /**
     * Return whether the field 'payload.mux_valid7' is an array (false).
     */
    public static boolean isArray_payload_mux_valid7() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.mux_valid7'
     */
    public static int offset_payload_mux_valid7() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.mux_valid7'
     */
    public static int offsetBits_payload_mux_valid7() {
        return 72;
    }

    /**
     * Return the value (as a byte) of the field 'payload.mux_valid7'
     */
    public byte get_payload_mux_valid7() {
        return (byte)getUIntBEElement(offsetBits_payload_mux_valid7(), 1);
    }

    /**
     * Set the value of the field 'payload.mux_valid7'
     */
    public void set_payload_mux_valid7(byte value) {
        setUIntBEElement(offsetBits_payload_mux_valid7(), 1, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.mux_valid7'
     * WARNING: This field is not an even-sized number of bytes (1 bits).
     */
    public static int size_payload_mux_valid7() {
        return (1 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.mux_valid7'
     */
    public static int sizeBits_payload_mux_valid7() {
        return 1;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.mux_valid6
    //   Field type: byte
    //   Offset (bits): 73
    //   Size (bits): 1
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.mux_valid6' is signed (false).
     */
    public static boolean isSigned_payload_mux_valid6() {
        return false;
    }

    /**
     * Return whether the field 'payload.mux_valid6' is an array (false).
     */
    public static boolean isArray_payload_mux_valid6() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.mux_valid6'
     * WARNING: This field is not byte-aligned (bit offset 73).
     */
    public static int offset_payload_mux_valid6() {
        return (73 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.mux_valid6'
     */
    public static int offsetBits_payload_mux_valid6() {
        return 73;
    }

    /**
     * Return the value (as a byte) of the field 'payload.mux_valid6'
     */
    public byte get_payload_mux_valid6() {
        return (byte)getUIntBEElement(offsetBits_payload_mux_valid6(), 1);
    }

    /**
     * Set the value of the field 'payload.mux_valid6'
     */
    public void set_payload_mux_valid6(byte value) {
        setUIntBEElement(offsetBits_payload_mux_valid6(), 1, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.mux_valid6'
     * WARNING: This field is not an even-sized number of bytes (1 bits).
     */
    public static int size_payload_mux_valid6() {
        return (1 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.mux_valid6'
     */
    public static int sizeBits_payload_mux_valid6() {
        return 1;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.mux_valid5
    //   Field type: byte
    //   Offset (bits): 74
    //   Size (bits): 1
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.mux_valid5' is signed (false).
     */
    public static boolean isSigned_payload_mux_valid5() {
        return false;
    }

    /**
     * Return whether the field 'payload.mux_valid5' is an array (false).
     */
    public static boolean isArray_payload_mux_valid5() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.mux_valid5'
     * WARNING: This field is not byte-aligned (bit offset 74).
     */
    public static int offset_payload_mux_valid5() {
        return (74 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.mux_valid5'
     */
    public static int offsetBits_payload_mux_valid5() {
        return 74;
    }

    /**
     * Return the value (as a byte) of the field 'payload.mux_valid5'
     */
    public byte get_payload_mux_valid5() {
        return (byte)getUIntBEElement(offsetBits_payload_mux_valid5(), 1);
    }

    /**
     * Set the value of the field 'payload.mux_valid5'
     */
    public void set_payload_mux_valid5(byte value) {
        setUIntBEElement(offsetBits_payload_mux_valid5(), 1, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.mux_valid5'
     * WARNING: This field is not an even-sized number of bytes (1 bits).
     */
    public static int size_payload_mux_valid5() {
        return (1 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.mux_valid5'
     */
    public static int sizeBits_payload_mux_valid5() {
        return 1;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.mux_valid4
    //   Field type: byte
    //   Offset (bits): 75
    //   Size (bits): 1
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.mux_valid4' is signed (false).
     */
    public static boolean isSigned_payload_mux_valid4() {
        return false;
    }

    /**
     * Return whether the field 'payload.mux_valid4' is an array (false).
     */
    public static boolean isArray_payload_mux_valid4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.mux_valid4'
     * WARNING: This field is not byte-aligned (bit offset 75).
     */
    public static int offset_payload_mux_valid4() {
        return (75 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.mux_valid4'
     */
    public static int offsetBits_payload_mux_valid4() {
        return 75;
    }

    /**
     * Return the value (as a byte) of the field 'payload.mux_valid4'
     */
    public byte get_payload_mux_valid4() {
        return (byte)getUIntBEElement(offsetBits_payload_mux_valid4(), 1);
    }

    /**
     * Set the value of the field 'payload.mux_valid4'
     */
    public void set_payload_mux_valid4(byte value) {
        setUIntBEElement(offsetBits_payload_mux_valid4(), 1, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.mux_valid4'
     * WARNING: This field is not an even-sized number of bytes (1 bits).
     */
    public static int size_payload_mux_valid4() {
        return (1 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.mux_valid4'
     */
    public static int sizeBits_payload_mux_valid4() {
        return 1;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.mux_valid3
    //   Field type: byte
    //   Offset (bits): 76
    //   Size (bits): 1
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.mux_valid3' is signed (false).
     */
    public static boolean isSigned_payload_mux_valid3() {
        return false;
    }

    /**
     * Return whether the field 'payload.mux_valid3' is an array (false).
     */
    public static boolean isArray_payload_mux_valid3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.mux_valid3'
     * WARNING: This field is not byte-aligned (bit offset 76).
     */
    public static int offset_payload_mux_valid3() {
        return (76 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.mux_valid3'
     */
    public static int offsetBits_payload_mux_valid3() {
        return 76;
    }

    /**
     * Return the value (as a byte) of the field 'payload.mux_valid3'
     */
    public byte get_payload_mux_valid3() {
        return (byte)getUIntBEElement(offsetBits_payload_mux_valid3(), 1);
    }

    /**
     * Set the value of the field 'payload.mux_valid3'
     */
    public void set_payload_mux_valid3(byte value) {
        setUIntBEElement(offsetBits_payload_mux_valid3(), 1, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.mux_valid3'
     * WARNING: This field is not an even-sized number of bytes (1 bits).
     */
    public static int size_payload_mux_valid3() {
        return (1 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.mux_valid3'
     */
    public static int sizeBits_payload_mux_valid3() {
        return 1;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.mux_valid2
    //   Field type: byte
    //   Offset (bits): 77
    //   Size (bits): 1
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.mux_valid2' is signed (false).
     */
    public static boolean isSigned_payload_mux_valid2() {
        return false;
    }

    /**
     * Return whether the field 'payload.mux_valid2' is an array (false).
     */
    public static boolean isArray_payload_mux_valid2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.mux_valid2'
     * WARNING: This field is not byte-aligned (bit offset 77).
     */
    public static int offset_payload_mux_valid2() {
        return (77 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.mux_valid2'
     */
    public static int offsetBits_payload_mux_valid2() {
        return 77;
    }

    /**
     * Return the value (as a byte) of the field 'payload.mux_valid2'
     */
    public byte get_payload_mux_valid2() {
        return (byte)getUIntBEElement(offsetBits_payload_mux_valid2(), 1);
    }

    /**
     * Set the value of the field 'payload.mux_valid2'
     */
    public void set_payload_mux_valid2(byte value) {
        setUIntBEElement(offsetBits_payload_mux_valid2(), 1, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.mux_valid2'
     * WARNING: This field is not an even-sized number of bytes (1 bits).
     */
    public static int size_payload_mux_valid2() {
        return (1 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.mux_valid2'
     */
    public static int sizeBits_payload_mux_valid2() {
        return 1;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.mux_valid1
    //   Field type: byte
    //   Offset (bits): 78
    //   Size (bits): 1
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.mux_valid1' is signed (false).
     */
    public static boolean isSigned_payload_mux_valid1() {
        return false;
    }

    /**
     * Return whether the field 'payload.mux_valid1' is an array (false).
     */
    public static boolean isArray_payload_mux_valid1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.mux_valid1'
     * WARNING: This field is not byte-aligned (bit offset 78).
     */
    public static int offset_payload_mux_valid1() {
        return (78 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.mux_valid1'
     */
    public static int offsetBits_payload_mux_valid1() {
        return 78;
    }

    /**
     * Return the value (as a byte) of the field 'payload.mux_valid1'
     */
    public byte get_payload_mux_valid1() {
        return (byte)getUIntBEElement(offsetBits_payload_mux_valid1(), 1);
    }

    /**
     * Set the value of the field 'payload.mux_valid1'
     */
    public void set_payload_mux_valid1(byte value) {
        setUIntBEElement(offsetBits_payload_mux_valid1(), 1, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.mux_valid1'
     * WARNING: This field is not an even-sized number of bytes (1 bits).
     */
    public static int size_payload_mux_valid1() {
        return (1 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.mux_valid1'
     */
    public static int sizeBits_payload_mux_valid1() {
        return 1;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.mux_valid0
    //   Field type: byte
    //   Offset (bits): 79
    //   Size (bits): 1
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.mux_valid0' is signed (false).
     */
    public static boolean isSigned_payload_mux_valid0() {
        return false;
    }

    /**
     * Return whether the field 'payload.mux_valid0' is an array (false).
     */
    public static boolean isArray_payload_mux_valid0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.mux_valid0'
     * WARNING: This field is not byte-aligned (bit offset 79).
     */
    public static int offset_payload_mux_valid0() {
        return (79 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.mux_valid0'
     */
    public static int offsetBits_payload_mux_valid0() {
        return 79;
    }

    /**
     * Return the value (as a byte) of the field 'payload.mux_valid0'
     */
    public byte get_payload_mux_valid0() {
        return (byte)getUIntBEElement(offsetBits_payload_mux_valid0(), 1);
    }

    /**
     * Set the value of the field 'payload.mux_valid0'
     */
    public void set_payload_mux_valid0(byte value) {
        setUIntBEElement(offsetBits_payload_mux_valid0(), 1, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.mux_valid0'
     * WARNING: This field is not an even-sized number of bytes (1 bits).
     */
    public static int size_payload_mux_valid0() {
        return (1 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.mux_valid0'
     */
    public static int sizeBits_payload_mux_valid0() {
        return 1;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.data.dielectric
    //   Field type: short[]
    //   Offset (bits): 0
    //   Size of each element (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.data.dielectric' is signed (false).
     */
    public static boolean isSigned_payload_data_dielectric() {
        return false;
    }

    /**
     * Return whether the field 'payload.data.dielectric' is an array (true).
     */
    public static boolean isArray_payload_data_dielectric() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.data.dielectric'
     */
    public static int offset_payload_data_dielectric(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 32;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.data.dielectric'
     */
    public static int offsetBits_payload_data_dielectric(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 32;
        return offset;
    }

    /**
     * Return the entire array 'payload.data.dielectric' as a short[]
     */
    public short[] get_payload_data_dielectric() {
        short[] tmp = new short[5];
        for (int index0 = 0; index0 < numElements_payload_data_dielectric(0); index0++) {
            tmp[index0] = getElement_payload_data_dielectric(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'payload.data.dielectric' from the given short[]
     */
    public void set_payload_data_dielectric(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_payload_data_dielectric(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'payload.data.dielectric'
     */
    public short getElement_payload_data_dielectric(int index1) {
        return (short)getUIntBEElement(offsetBits_payload_data_dielectric(index1), 12);
    }

    /**
     * Set an element of the array 'payload.data.dielectric'
     */
    public void setElement_payload_data_dielectric(int index1, short value) {
        setUIntBEElement(offsetBits_payload_data_dielectric(index1), 12, value);
    }

    /**
     * Return the total size, in bytes, of the array 'payload.data.dielectric'
     */
    public static int totalSize_payload_data_dielectric() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'payload.data.dielectric'
     */
    public static int totalSizeBits_payload_data_dielectric() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'payload.data.dielectric'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int elementSize_payload_data_dielectric() {
        return (12 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'payload.data.dielectric'
     */
    public static int elementSizeBits_payload_data_dielectric() {
        return 12;
    }

    /**
     * Return the number of dimensions in the array 'payload.data.dielectric'
     */
    public static int numDimensions_payload_data_dielectric() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'payload.data.dielectric'
     */
    public static int numElements_payload_data_dielectric() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'payload.data.dielectric'
     * for the given dimension.
     */
    public static int numElements_payload_data_dielectric(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.data.conductivity
    //   Field type: short[]
    //   Offset (bits): 12
    //   Size of each element (bits): 10
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.data.conductivity' is signed (false).
     */
    public static boolean isSigned_payload_data_conductivity() {
        return false;
    }

    /**
     * Return whether the field 'payload.data.conductivity' is an array (true).
     */
    public static boolean isArray_payload_data_conductivity() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.data.conductivity'
     * WARNING: This field is not byte-aligned (bit offset 12).
     */
    public static int offset_payload_data_conductivity(int index1) {
        int offset = 12;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 32;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.data.conductivity'
     */
    public static int offsetBits_payload_data_conductivity(int index1) {
        int offset = 12;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 32;
        return offset;
    }

    /**
     * Return the entire array 'payload.data.conductivity' as a short[]
     */
    public short[] get_payload_data_conductivity() {
        short[] tmp = new short[5];
        for (int index0 = 0; index0 < numElements_payload_data_conductivity(0); index0++) {
            tmp[index0] = getElement_payload_data_conductivity(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'payload.data.conductivity' from the given short[]
     */
    public void set_payload_data_conductivity(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_payload_data_conductivity(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'payload.data.conductivity'
     */
    public short getElement_payload_data_conductivity(int index1) {
        return (short)getUIntBEElement(offsetBits_payload_data_conductivity(index1), 10);
    }

    /**
     * Set an element of the array 'payload.data.conductivity'
     */
    public void setElement_payload_data_conductivity(int index1, short value) {
        setUIntBEElement(offsetBits_payload_data_conductivity(index1), 10, value);
    }

    /**
     * Return the total size, in bytes, of the array 'payload.data.conductivity'
     */
    public static int totalSize_payload_data_conductivity() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'payload.data.conductivity'
     */
    public static int totalSizeBits_payload_data_conductivity() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'payload.data.conductivity'
     * WARNING: This field is not an even-sized number of bytes (10 bits).
     */
    public static int elementSize_payload_data_conductivity() {
        return (10 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'payload.data.conductivity'
     */
    public static int elementSizeBits_payload_data_conductivity() {
        return 10;
    }

    /**
     * Return the number of dimensions in the array 'payload.data.conductivity'
     */
    public static int numDimensions_payload_data_conductivity() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'payload.data.conductivity'
     */
    public static int numElements_payload_data_conductivity() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'payload.data.conductivity'
     * for the given dimension.
     */
    public static int numElements_payload_data_conductivity(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.data.temperature
    //   Field type: short[]
    //   Offset (bits): 22
    //   Size of each element (bits): 10
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.data.temperature' is signed (false).
     */
    public static boolean isSigned_payload_data_temperature() {
        return false;
    }

    /**
     * Return whether the field 'payload.data.temperature' is an array (true).
     */
    public static boolean isArray_payload_data_temperature() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.data.temperature'
     * WARNING: This field is not byte-aligned (bit offset 22).
     */
    public static int offset_payload_data_temperature(int index1) {
        int offset = 22;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 32;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.data.temperature'
     */
    public static int offsetBits_payload_data_temperature(int index1) {
        int offset = 22;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 32;
        return offset;
    }

    /**
     * Return the entire array 'payload.data.temperature' as a short[]
     */
    public short[] get_payload_data_temperature() {
        short[] tmp = new short[5];
        for (int index0 = 0; index0 < numElements_payload_data_temperature(0); index0++) {
            tmp[index0] = getElement_payload_data_temperature(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'payload.data.temperature' from the given short[]
     */
    public void set_payload_data_temperature(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_payload_data_temperature(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'payload.data.temperature'
     */
    public short getElement_payload_data_temperature(int index1) {
        return (short)getUIntBEElement(offsetBits_payload_data_temperature(index1), 10);
    }

    /**
     * Set an element of the array 'payload.data.temperature'
     */
    public void setElement_payload_data_temperature(int index1, short value) {
        setUIntBEElement(offsetBits_payload_data_temperature(index1), 10, value);
    }

    /**
     * Return the total size, in bytes, of the array 'payload.data.temperature'
     */
    public static int totalSize_payload_data_temperature() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'payload.data.temperature'
     */
    public static int totalSizeBits_payload_data_temperature() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'payload.data.temperature'
     * WARNING: This field is not an even-sized number of bytes (10 bits).
     */
    public static int elementSize_payload_data_temperature() {
        return (10 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'payload.data.temperature'
     */
    public static int elementSizeBits_payload_data_temperature() {
        return 10;
    }

    /**
     * Return the number of dimensions in the array 'payload.data.temperature'
     */
    public static int numDimensions_payload_data_temperature() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'payload.data.temperature'
     */
    public static int numElements_payload_data_temperature() {
        return 5;
    }

    /**
     * Return the number of elements in the array 'payload.data.temperature'
     * for the given dimension.
     */
    public static int numElements_payload_data_temperature(int dimension) {
      int array_dims[] = { 5,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
