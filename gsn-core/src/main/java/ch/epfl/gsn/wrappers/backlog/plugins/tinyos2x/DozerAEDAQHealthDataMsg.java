/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DozerAEDAQHealthDataMsg'
 * message type.
 */

 package ch.epfl.gsn.wrappers.backlog.plugins.tinyos2x;

public class DozerAEDAQHealthDataMsg extends DataHeaderMsg {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 30;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 194;

    /** Create a new DozerAEDAQHealthDataMsg of size 30. */
    public DozerAEDAQHealthDataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DozerAEDAQHealthDataMsg of the given data_length. */
    public DozerAEDAQHealthDataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDAQHealthDataMsg with the given data_length
     * and base offset.
     */
    public DozerAEDAQHealthDataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDAQHealthDataMsg using the given byte array
     * as backing store.
     */
    public DozerAEDAQHealthDataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDAQHealthDataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DozerAEDAQHealthDataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDAQHealthDataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DozerAEDAQHealthDataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDAQHealthDataMsg embedded in the given message
     * at the given base offset.
     */
    public DozerAEDAQHealthDataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDAQHealthDataMsg embedded in the given message
     * at the given base offset and length.
     */
    public DozerAEDAQHealthDataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DozerAEDAQHealthDataMsg> \n";
      try {
        s += "  [header.seqNr=0x"+Long.toHexString(get_header_seqNr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.originatorID=0x"+Long.toHexString(get_header_originatorID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.low=0x"+Long.toHexString(get_header_aTime_low())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.high=0x"+Long.toHexString(get_header_aTime_high())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.VccCh1=0x"+Long.toHexString(get_payload_VccCh1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.VccCh2=0x"+Long.toHexString(get_payload_VccCh2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.VccAdc=0x"+Long.toHexString(get_payload_VccAdc())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.RefAdc=0x"+Long.toHexString(get_payload_RefAdc())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.VccOpa=0x"+Long.toHexString(get_payload_VccOpa())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.Vcc55V=0x"+Long.toHexString(get_payload_Vcc55V())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.I12V=0x"+Long.toHexString(get_payload_I12V())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.I55VAnalog=0x"+Long.toHexString(get_payload_I55VAnalog())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.I55VDigital=0x"+Long.toHexString(get_payload_I55VDigital())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.SDEventsFree=0x"+Long.toHexString(get_payload_SDEventsFree())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.DAQPowerState=0x"+Long.toHexString(get_payload_DAQPowerState())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqNr
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqNr' is signed (false).
     */
    public static boolean isSigned_header_seqNr() {
        return false;
    }

    /**
     * Return whether the field 'header.seqNr' is an array (false).
     */
    public static boolean isArray_header_seqNr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqNr'
     */
    public static int offset_header_seqNr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqNr'
     */
    public static int offsetBits_header_seqNr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.seqNr'
     */
    public int get_header_seqNr() {
        return (int)getUIntBEElement(offsetBits_header_seqNr(), 16);
    }

    /**
     * Set the value of the field 'header.seqNr'
     */
    public void set_header_seqNr(int value) {
        setUIntBEElement(offsetBits_header_seqNr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqNr'
     */
    public static int size_header_seqNr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqNr'
     */
    public static int sizeBits_header_seqNr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.originatorID
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.originatorID' is signed (false).
     */
    public static boolean isSigned_header_originatorID() {
        return false;
    }

    /**
     * Return whether the field 'header.originatorID' is an array (false).
     */
    public static boolean isArray_header_originatorID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.originatorID'
     */
    public static int offset_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.originatorID'
     */
    public static int offsetBits_header_originatorID() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.originatorID'
     */
    public int get_header_originatorID() {
        return (int)getUIntBEElement(offsetBits_header_originatorID(), 16);
    }

    /**
     * Set the value of the field 'header.originatorID'
     */
    public void set_header_originatorID(int value) {
        setUIntBEElement(offsetBits_header_originatorID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.originatorID'
     */
    public static int size_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.originatorID'
     */
    public static int sizeBits_header_originatorID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.low
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.low' is signed (false).
     */
    public static boolean isSigned_header_aTime_low() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.low' is an array (false).
     */
    public static boolean isArray_header_aTime_low() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.low'
     */
    public static int offset_header_aTime_low() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.low'
     */
    public static int offsetBits_header_aTime_low() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'header.aTime.low'
     */
    public int get_header_aTime_low() {
        return (int)getUIntBEElement(offsetBits_header_aTime_low(), 16);
    }

    /**
     * Set the value of the field 'header.aTime.low'
     */
    public void set_header_aTime_low(int value) {
        setUIntBEElement(offsetBits_header_aTime_low(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.low'
     */
    public static int size_header_aTime_low() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.low'
     */
    public static int sizeBits_header_aTime_low() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.high
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.high' is signed (false).
     */
    public static boolean isSigned_header_aTime_high() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.high' is an array (false).
     */
    public static boolean isArray_header_aTime_high() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.high'
     */
    public static int offset_header_aTime_high() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.high'
     */
    public static int offsetBits_header_aTime_high() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'header.aTime.high'
     */
    public short get_header_aTime_high() {
        return (short)getUIntBEElement(offsetBits_header_aTime_high(), 8);
    }

    /**
     * Set the value of the field 'header.aTime.high'
     */
    public void set_header_aTime_high(short value) {
        setUIntBEElement(offsetBits_header_aTime_high(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.high'
     */
    public static int size_header_aTime_high() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.high'
     */
    public static int sizeBits_header_aTime_high() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.VccCh1
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.VccCh1' is signed (false).
     */
    public static boolean isSigned_payload_VccCh1() {
        return false;
    }

    /**
     * Return whether the field 'payload.VccCh1' is an array (false).
     */
    public static boolean isArray_payload_VccCh1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.VccCh1'
     */
    public static int offset_payload_VccCh1() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.VccCh1'
     */
    public static int offsetBits_payload_VccCh1() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'payload.VccCh1'
     */
    public int get_payload_VccCh1() {
        return (int)getUIntBEElement(offsetBits_payload_VccCh1(), 16);
    }

    /**
     * Set the value of the field 'payload.VccCh1'
     */
    public void set_payload_VccCh1(int value) {
        setUIntBEElement(offsetBits_payload_VccCh1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.VccCh1'
     */
    public static int size_payload_VccCh1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.VccCh1'
     */
    public static int sizeBits_payload_VccCh1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.VccCh2
    //   Field type: int
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.VccCh2' is signed (false).
     */
    public static boolean isSigned_payload_VccCh2() {
        return false;
    }

    /**
     * Return whether the field 'payload.VccCh2' is an array (false).
     */
    public static boolean isArray_payload_VccCh2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.VccCh2'
     */
    public static int offset_payload_VccCh2() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.VccCh2'
     */
    public static int offsetBits_payload_VccCh2() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'payload.VccCh2'
     */
    public int get_payload_VccCh2() {
        return (int)getUIntBEElement(offsetBits_payload_VccCh2(), 16);
    }

    /**
     * Set the value of the field 'payload.VccCh2'
     */
    public void set_payload_VccCh2(int value) {
        setUIntBEElement(offsetBits_payload_VccCh2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.VccCh2'
     */
    public static int size_payload_VccCh2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.VccCh2'
     */
    public static int sizeBits_payload_VccCh2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.VccAdc
    //   Field type: int
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.VccAdc' is signed (false).
     */
    public static boolean isSigned_payload_VccAdc() {
        return false;
    }

    /**
     * Return whether the field 'payload.VccAdc' is an array (false).
     */
    public static boolean isArray_payload_VccAdc() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.VccAdc'
     */
    public static int offset_payload_VccAdc() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.VccAdc'
     */
    public static int offsetBits_payload_VccAdc() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'payload.VccAdc'
     */
    public int get_payload_VccAdc() {
        return (int)getUIntBEElement(offsetBits_payload_VccAdc(), 16);
    }

    /**
     * Set the value of the field 'payload.VccAdc'
     */
    public void set_payload_VccAdc(int value) {
        setUIntBEElement(offsetBits_payload_VccAdc(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.VccAdc'
     */
    public static int size_payload_VccAdc() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.VccAdc'
     */
    public static int sizeBits_payload_VccAdc() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.RefAdc
    //   Field type: int
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.RefAdc' is signed (false).
     */
    public static boolean isSigned_payload_RefAdc() {
        return false;
    }

    /**
     * Return whether the field 'payload.RefAdc' is an array (false).
     */
    public static boolean isArray_payload_RefAdc() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.RefAdc'
     */
    public static int offset_payload_RefAdc() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.RefAdc'
     */
    public static int offsetBits_payload_RefAdc() {
        return 104;
    }

    /**
     * Return the value (as a int) of the field 'payload.RefAdc'
     */
    public int get_payload_RefAdc() {
        return (int)getUIntBEElement(offsetBits_payload_RefAdc(), 16);
    }

    /**
     * Set the value of the field 'payload.RefAdc'
     */
    public void set_payload_RefAdc(int value) {
        setUIntBEElement(offsetBits_payload_RefAdc(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.RefAdc'
     */
    public static int size_payload_RefAdc() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.RefAdc'
     */
    public static int sizeBits_payload_RefAdc() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.VccOpa
    //   Field type: int
    //   Offset (bits): 120
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.VccOpa' is signed (false).
     */
    public static boolean isSigned_payload_VccOpa() {
        return false;
    }

    /**
     * Return whether the field 'payload.VccOpa' is an array (false).
     */
    public static boolean isArray_payload_VccOpa() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.VccOpa'
     */
    public static int offset_payload_VccOpa() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.VccOpa'
     */
    public static int offsetBits_payload_VccOpa() {
        return 120;
    }

    /**
     * Return the value (as a int) of the field 'payload.VccOpa'
     */
    public int get_payload_VccOpa() {
        return (int)getUIntBEElement(offsetBits_payload_VccOpa(), 16);
    }

    /**
     * Set the value of the field 'payload.VccOpa'
     */
    public void set_payload_VccOpa(int value) {
        setUIntBEElement(offsetBits_payload_VccOpa(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.VccOpa'
     */
    public static int size_payload_VccOpa() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.VccOpa'
     */
    public static int sizeBits_payload_VccOpa() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.Vcc55V
    //   Field type: int
    //   Offset (bits): 136
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.Vcc55V' is signed (false).
     */
    public static boolean isSigned_payload_Vcc55V() {
        return false;
    }

    /**
     * Return whether the field 'payload.Vcc55V' is an array (false).
     */
    public static boolean isArray_payload_Vcc55V() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.Vcc55V'
     */
    public static int offset_payload_Vcc55V() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.Vcc55V'
     */
    public static int offsetBits_payload_Vcc55V() {
        return 136;
    }

    /**
     * Return the value (as a int) of the field 'payload.Vcc55V'
     */
    public int get_payload_Vcc55V() {
        return (int)getUIntBEElement(offsetBits_payload_Vcc55V(), 16);
    }

    /**
     * Set the value of the field 'payload.Vcc55V'
     */
    public void set_payload_Vcc55V(int value) {
        setUIntBEElement(offsetBits_payload_Vcc55V(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.Vcc55V'
     */
    public static int size_payload_Vcc55V() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.Vcc55V'
     */
    public static int sizeBits_payload_Vcc55V() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.I12V
    //   Field type: int
    //   Offset (bits): 152
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.I12V' is signed (false).
     */
    public static boolean isSigned_payload_I12V() {
        return false;
    }

    /**
     * Return whether the field 'payload.I12V' is an array (false).
     */
    public static boolean isArray_payload_I12V() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.I12V'
     */
    public static int offset_payload_I12V() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.I12V'
     */
    public static int offsetBits_payload_I12V() {
        return 152;
    }

    /**
     * Return the value (as a int) of the field 'payload.I12V'
     */
    public int get_payload_I12V() {
        return (int)getUIntBEElement(offsetBits_payload_I12V(), 16);
    }

    /**
     * Set the value of the field 'payload.I12V'
     */
    public void set_payload_I12V(int value) {
        setUIntBEElement(offsetBits_payload_I12V(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.I12V'
     */
    public static int size_payload_I12V() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.I12V'
     */
    public static int sizeBits_payload_I12V() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.I55VAnalog
    //   Field type: int
    //   Offset (bits): 168
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.I55VAnalog' is signed (false).
     */
    public static boolean isSigned_payload_I55VAnalog() {
        return false;
    }

    /**
     * Return whether the field 'payload.I55VAnalog' is an array (false).
     */
    public static boolean isArray_payload_I55VAnalog() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.I55VAnalog'
     */
    public static int offset_payload_I55VAnalog() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.I55VAnalog'
     */
    public static int offsetBits_payload_I55VAnalog() {
        return 168;
    }

    /**
     * Return the value (as a int) of the field 'payload.I55VAnalog'
     */
    public int get_payload_I55VAnalog() {
        return (int)getUIntBEElement(offsetBits_payload_I55VAnalog(), 16);
    }

    /**
     * Set the value of the field 'payload.I55VAnalog'
     */
    public void set_payload_I55VAnalog(int value) {
        setUIntBEElement(offsetBits_payload_I55VAnalog(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.I55VAnalog'
     */
    public static int size_payload_I55VAnalog() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.I55VAnalog'
     */
    public static int sizeBits_payload_I55VAnalog() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.I55VDigital
    //   Field type: int
    //   Offset (bits): 184
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.I55VDigital' is signed (false).
     */
    public static boolean isSigned_payload_I55VDigital() {
        return false;
    }

    /**
     * Return whether the field 'payload.I55VDigital' is an array (false).
     */
    public static boolean isArray_payload_I55VDigital() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.I55VDigital'
     */
    public static int offset_payload_I55VDigital() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.I55VDigital'
     */
    public static int offsetBits_payload_I55VDigital() {
        return 184;
    }

    /**
     * Return the value (as a int) of the field 'payload.I55VDigital'
     */
    public int get_payload_I55VDigital() {
        return (int)getUIntBEElement(offsetBits_payload_I55VDigital(), 16);
    }

    /**
     * Set the value of the field 'payload.I55VDigital'
     */
    public void set_payload_I55VDigital(int value) {
        setUIntBEElement(offsetBits_payload_I55VDigital(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.I55VDigital'
     */
    public static int size_payload_I55VDigital() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.I55VDigital'
     */
    public static int sizeBits_payload_I55VDigital() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.SDEventsFree
    //   Field type: long
    //   Offset (bits): 200
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.SDEventsFree' is signed (false).
     */
    public static boolean isSigned_payload_SDEventsFree() {
        return false;
    }

    /**
     * Return whether the field 'payload.SDEventsFree' is an array (false).
     */
    public static boolean isArray_payload_SDEventsFree() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.SDEventsFree'
     */
    public static int offset_payload_SDEventsFree() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.SDEventsFree'
     */
    public static int offsetBits_payload_SDEventsFree() {
        return 200;
    }

    /**
     * Return the value (as a long) of the field 'payload.SDEventsFree'
     */
    public long get_payload_SDEventsFree() {
        return (long)getUIntBEElement(offsetBits_payload_SDEventsFree(), 32);
    }

    /**
     * Set the value of the field 'payload.SDEventsFree'
     */
    public void set_payload_SDEventsFree(long value) {
        setUIntBEElement(offsetBits_payload_SDEventsFree(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.SDEventsFree'
     */
    public static int size_payload_SDEventsFree() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.SDEventsFree'
     */
    public static int sizeBits_payload_SDEventsFree() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.DAQPowerState
    //   Field type: short
    //   Offset (bits): 232
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.DAQPowerState' is signed (false).
     */
    public static boolean isSigned_payload_DAQPowerState() {
        return false;
    }

    /**
     * Return whether the field 'payload.DAQPowerState' is an array (false).
     */
    public static boolean isArray_payload_DAQPowerState() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.DAQPowerState'
     */
    public static int offset_payload_DAQPowerState() {
        return (232 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.DAQPowerState'
     */
    public static int offsetBits_payload_DAQPowerState() {
        return 232;
    }

    /**
     * Return the value (as a short) of the field 'payload.DAQPowerState'
     */
    public short get_payload_DAQPowerState() {
        return (short)getUIntBEElement(offsetBits_payload_DAQPowerState(), 8);
    }

    /**
     * Set the value of the field 'payload.DAQPowerState'
     */
    public void set_payload_DAQPowerState(short value) {
        setUIntBEElement(offsetBits_payload_DAQPowerState(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.DAQPowerState'
     */
    public static int size_payload_DAQPowerState() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.DAQPowerState'
     */
    public static int sizeBits_payload_DAQPowerState() {
        return 8;
    }

}
