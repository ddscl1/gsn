/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DozerAEDataMsg'
 * message type.
 */

 package ch.epfl.gsn.wrappers.backlog.plugins.tinyos2x;

public class DozerAEDataMsg extends DataHeaderMsg {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 30;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 192;

    /** Create a new DozerAEDataMsg of size 30. */
    public DozerAEDataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DozerAEDataMsg of the given data_length. */
    public DozerAEDataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDataMsg with the given data_length
     * and base offset.
     */
    public DozerAEDataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDataMsg using the given byte array
     * as backing store.
     */
    public DozerAEDataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DozerAEDataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DozerAEDataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDataMsg embedded in the given message
     * at the given base offset.
     */
    public DozerAEDataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerAEDataMsg embedded in the given message
     * at the given base offset and length.
     */
    public DozerAEDataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DozerAEDataMsg> \n";
      try {
        s += "  [header.seqNr=0x"+Long.toHexString(get_header_seqNr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.originatorID=0x"+Long.toHexString(get_header_originatorID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.low=0x"+Long.toHexString(get_header_aTime_low())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.high=0x"+Long.toHexString(get_header_aTime_high())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.serial=0x"+Long.toHexString(get_payload_serial())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.startSample=0x"+Long.toHexString(get_payload_startSample())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.length=0x"+Long.toHexString(get_payload_length())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.risetime=0x"+Long.toHexString(get_payload_risetime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.amplitude=0x"+Long.toHexString(get_payload_amplitude())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.count=0x"+Long.toHexString(get_payload_count())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.energy=0x"+Long.toHexString(get_payload_energy())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.posttrigger=0x"+Long.toHexString(get_payload_posttrigger())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.thresholdChannel=0x"+Long.toHexString(get_payload_thresholdChannel())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqNr
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqNr' is signed (false).
     */
    public static boolean isSigned_header_seqNr() {
        return false;
    }

    /**
     * Return whether the field 'header.seqNr' is an array (false).
     */
    public static boolean isArray_header_seqNr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqNr'
     */
    public static int offset_header_seqNr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqNr'
     */
    public static int offsetBits_header_seqNr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.seqNr'
     */
    public int get_header_seqNr() {
        return (int)getUIntBEElement(offsetBits_header_seqNr(), 16);
    }

    /**
     * Set the value of the field 'header.seqNr'
     */
    public void set_header_seqNr(int value) {
        setUIntBEElement(offsetBits_header_seqNr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqNr'
     */
    public static int size_header_seqNr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqNr'
     */
    public static int sizeBits_header_seqNr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.originatorID
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.originatorID' is signed (false).
     */
    public static boolean isSigned_header_originatorID() {
        return false;
    }

    /**
     * Return whether the field 'header.originatorID' is an array (false).
     */
    public static boolean isArray_header_originatorID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.originatorID'
     */
    public static int offset_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.originatorID'
     */
    public static int offsetBits_header_originatorID() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.originatorID'
     */
    public int get_header_originatorID() {
        return (int)getUIntBEElement(offsetBits_header_originatorID(), 16);
    }

    /**
     * Set the value of the field 'header.originatorID'
     */
    public void set_header_originatorID(int value) {
        setUIntBEElement(offsetBits_header_originatorID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.originatorID'
     */
    public static int size_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.originatorID'
     */
    public static int sizeBits_header_originatorID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.low
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.low' is signed (false).
     */
    public static boolean isSigned_header_aTime_low() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.low' is an array (false).
     */
    public static boolean isArray_header_aTime_low() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.low'
     */
    public static int offset_header_aTime_low() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.low'
     */
    public static int offsetBits_header_aTime_low() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'header.aTime.low'
     */
    public int get_header_aTime_low() {
        return (int)getUIntBEElement(offsetBits_header_aTime_low(), 16);
    }

    /**
     * Set the value of the field 'header.aTime.low'
     */
    public void set_header_aTime_low(int value) {
        setUIntBEElement(offsetBits_header_aTime_low(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.low'
     */
    public static int size_header_aTime_low() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.low'
     */
    public static int sizeBits_header_aTime_low() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.high
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.high' is signed (false).
     */
    public static boolean isSigned_header_aTime_high() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.high' is an array (false).
     */
    public static boolean isArray_header_aTime_high() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.high'
     */
    public static int offset_header_aTime_high() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.high'
     */
    public static int offsetBits_header_aTime_high() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'header.aTime.high'
     */
    public short get_header_aTime_high() {
        return (short)getUIntBEElement(offsetBits_header_aTime_high(), 8);
    }

    /**
     * Set the value of the field 'header.aTime.high'
     */
    public void set_header_aTime_high(short value) {
        setUIntBEElement(offsetBits_header_aTime_high(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.high'
     */
    public static int size_header_aTime_high() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.high'
     */
    public static int sizeBits_header_aTime_high() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.serial
    //   Field type: long
    //   Offset (bits): 56
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.serial' is signed (false).
     */
    public static boolean isSigned_payload_serial() {
        return false;
    }

    /**
     * Return whether the field 'payload.serial' is an array (false).
     */
    public static boolean isArray_payload_serial() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.serial'
     */
    public static int offset_payload_serial() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.serial'
     */
    public static int offsetBits_payload_serial() {
        return 56;
    }

    /**
     * Return the value (as a long) of the field 'payload.serial'
     */
    public long get_payload_serial() {
        return (long)getUIntBEElement(offsetBits_payload_serial(), 32);
    }

    /**
     * Set the value of the field 'payload.serial'
     */
    public void set_payload_serial(long value) {
        setUIntBEElement(offsetBits_payload_serial(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.serial'
     */
    public static int size_payload_serial() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.serial'
     */
    public static int sizeBits_payload_serial() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.startSample
    //   Field type: long
    //   Offset (bits): 88
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.startSample' is signed (false).
     */
    public static boolean isSigned_payload_startSample() {
        return false;
    }

    /**
     * Return whether the field 'payload.startSample' is an array (false).
     */
    public static boolean isArray_payload_startSample() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.startSample'
     */
    public static int offset_payload_startSample() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.startSample'
     */
    public static int offsetBits_payload_startSample() {
        return 88;
    }

    /**
     * Return the value (as a long) of the field 'payload.startSample'
     */
    public long get_payload_startSample() {
        return (long)getUIntBEElement(offsetBits_payload_startSample(), 32);
    }

    /**
     * Set the value of the field 'payload.startSample'
     */
    public void set_payload_startSample(long value) {
        setUIntBEElement(offsetBits_payload_startSample(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.startSample'
     */
    public static int size_payload_startSample() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.startSample'
     */
    public static int sizeBits_payload_startSample() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.length
    //   Field type: int
    //   Offset (bits): 120
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.length' is signed (false).
     */
    public static boolean isSigned_payload_length() {
        return false;
    }

    /**
     * Return whether the field 'payload.length' is an array (false).
     */
    public static boolean isArray_payload_length() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.length'
     */
    public static int offset_payload_length() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.length'
     */
    public static int offsetBits_payload_length() {
        return 120;
    }

    /**
     * Return the value (as a int) of the field 'payload.length'
     */
    public int get_payload_length() {
        return (int)getUIntBEElement(offsetBits_payload_length(), 16);
    }

    /**
     * Set the value of the field 'payload.length'
     */
    public void set_payload_length(int value) {
        setUIntBEElement(offsetBits_payload_length(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.length'
     */
    public static int size_payload_length() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.length'
     */
    public static int sizeBits_payload_length() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.risetime
    //   Field type: int
    //   Offset (bits): 136
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.risetime' is signed (false).
     */
    public static boolean isSigned_payload_risetime() {
        return false;
    }

    /**
     * Return whether the field 'payload.risetime' is an array (false).
     */
    public static boolean isArray_payload_risetime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.risetime'
     */
    public static int offset_payload_risetime() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.risetime'
     */
    public static int offsetBits_payload_risetime() {
        return 136;
    }

    /**
     * Return the value (as a int) of the field 'payload.risetime'
     */
    public int get_payload_risetime() {
        return (int)getUIntBEElement(offsetBits_payload_risetime(), 16);
    }

    /**
     * Set the value of the field 'payload.risetime'
     */
    public void set_payload_risetime(int value) {
        setUIntBEElement(offsetBits_payload_risetime(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.risetime'
     */
    public static int size_payload_risetime() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.risetime'
     */
    public static int sizeBits_payload_risetime() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.amplitude
    //   Field type: int
    //   Offset (bits): 152
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.amplitude' is signed (false).
     */
    public static boolean isSigned_payload_amplitude() {
        return false;
    }

    /**
     * Return whether the field 'payload.amplitude' is an array (false).
     */
    public static boolean isArray_payload_amplitude() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.amplitude'
     */
    public static int offset_payload_amplitude() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.amplitude'
     */
    public static int offsetBits_payload_amplitude() {
        return 152;
    }

    /**
     * Return the value (as a int) of the field 'payload.amplitude'
     */
    public int get_payload_amplitude() {
        return (int)getUIntBEElement(offsetBits_payload_amplitude(), 16);
    }

    /**
     * Set the value of the field 'payload.amplitude'
     */
    public void set_payload_amplitude(int value) {
        setUIntBEElement(offsetBits_payload_amplitude(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.amplitude'
     */
    public static int size_payload_amplitude() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.amplitude'
     */
    public static int sizeBits_payload_amplitude() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.count
    //   Field type: int
    //   Offset (bits): 168
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.count' is signed (false).
     */
    public static boolean isSigned_payload_count() {
        return false;
    }

    /**
     * Return whether the field 'payload.count' is an array (false).
     */
    public static boolean isArray_payload_count() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.count'
     */
    public static int offset_payload_count() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.count'
     */
    public static int offsetBits_payload_count() {
        return 168;
    }

    /**
     * Return the value (as a int) of the field 'payload.count'
     */
    public int get_payload_count() {
        return (int)getUIntBEElement(offsetBits_payload_count(), 16);
    }

    /**
     * Set the value of the field 'payload.count'
     */
    public void set_payload_count(int value) {
        setUIntBEElement(offsetBits_payload_count(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.count'
     */
    public static int size_payload_count() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.count'
     */
    public static int sizeBits_payload_count() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.energy
    //   Field type: long
    //   Offset (bits): 184
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.energy' is signed (false).
     */
    public static boolean isSigned_payload_energy() {
        return false;
    }

    /**
     * Return whether the field 'payload.energy' is an array (false).
     */
    public static boolean isArray_payload_energy() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.energy'
     */
    public static int offset_payload_energy() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.energy'
     */
    public static int offsetBits_payload_energy() {
        return 184;
    }

    /**
     * Return the value (as a long) of the field 'payload.energy'
     */
    public long get_payload_energy() {
        return (long)getUIntBEElement(offsetBits_payload_energy(), 32);
    }

    /**
     * Set the value of the field 'payload.energy'
     */
    public void set_payload_energy(long value) {
        setUIntBEElement(offsetBits_payload_energy(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.energy'
     */
    public static int size_payload_energy() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.energy'
     */
    public static int sizeBits_payload_energy() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.posttrigger
    //   Field type: int
    //   Offset (bits): 216
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.posttrigger' is signed (false).
     */
    public static boolean isSigned_payload_posttrigger() {
        return false;
    }

    /**
     * Return whether the field 'payload.posttrigger' is an array (false).
     */
    public static boolean isArray_payload_posttrigger() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.posttrigger'
     */
    public static int offset_payload_posttrigger() {
        return (216 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.posttrigger'
     */
    public static int offsetBits_payload_posttrigger() {
        return 216;
    }

    /**
     * Return the value (as a int) of the field 'payload.posttrigger'
     */
    public int get_payload_posttrigger() {
        return (int)getUIntBEElement(offsetBits_payload_posttrigger(), 16);
    }

    /**
     * Set the value of the field 'payload.posttrigger'
     */
    public void set_payload_posttrigger(int value) {
        setUIntBEElement(offsetBits_payload_posttrigger(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.posttrigger'
     */
    public static int size_payload_posttrigger() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.posttrigger'
     */
    public static int sizeBits_payload_posttrigger() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.thresholdChannel
    //   Field type: short
    //   Offset (bits): 232
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.thresholdChannel' is signed (false).
     */
    public static boolean isSigned_payload_thresholdChannel() {
        return false;
    }

    /**
     * Return whether the field 'payload.thresholdChannel' is an array (false).
     */
    public static boolean isArray_payload_thresholdChannel() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.thresholdChannel'
     */
    public static int offset_payload_thresholdChannel() {
        return (232 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.thresholdChannel'
     */
    public static int offsetBits_payload_thresholdChannel() {
        return 232;
    }

    /**
     * Return the value (as a short) of the field 'payload.thresholdChannel'
     */
    public short get_payload_thresholdChannel() {
        return (short)getUIntBEElement(offsetBits_payload_thresholdChannel(), 8);
    }

    /**
     * Set the value of the field 'payload.thresholdChannel'
     */
    public void set_payload_thresholdChannel(short value) {
        setUIntBEElement(offsetBits_payload_thresholdChannel(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.thresholdChannel'
     */
    public static int size_payload_thresholdChannel() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.thresholdChannel'
     */
    public static int sizeBits_payload_thresholdChannel() {
        return 8;
    }

}
