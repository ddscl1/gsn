/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DozerDigitalDCXMsg'
 * message type.
 */

 package ch.epfl.gsn.wrappers.backlog.plugins.tinyos2x;

public class DozerDigitalDCXMsg extends DataHeaderMsg {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 30;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 134;

    /** Create a new DozerDigitalDCXMsg of size 30. */
    public DozerDigitalDCXMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DozerDigitalDCXMsg of the given data_length. */
    public DozerDigitalDCXMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDigitalDCXMsg with the given data_length
     * and base offset.
     */
    public DozerDigitalDCXMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDigitalDCXMsg using the given byte array
     * as backing store.
     */
    public DozerDigitalDCXMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDigitalDCXMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DozerDigitalDCXMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDigitalDCXMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DozerDigitalDCXMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDigitalDCXMsg embedded in the given message
     * at the given base offset.
     */
    public DozerDigitalDCXMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerDigitalDCXMsg embedded in the given message
     * at the given base offset and length.
     */
    public DozerDigitalDCXMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DozerDigitalDCXMsg> \n";
      try {
        s += "  [header.seqNr=0x"+Long.toHexString(get_header_seqNr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.originatorID=0x"+Long.toHexString(get_header_originatorID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.low=0x"+Long.toHexString(get_header_aTime_low())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.high=0x"+Long.toHexString(get_header_aTime_high())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.sample.valid=0x"+Long.toHexString(get_payload_sample_valid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.sample.no=0x"+Long.toHexString(get_payload_sample_no())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.dcx_batteryStatus=0x"+Long.toHexString(get_payload_dcx_batteryStatus())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.dcx.floatvalue=";
        for (int i = 0; i < 4; i++) {
          s += Float.toString(getElement_payload_dcx_floatvalue(i))+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.dcx.status=";
        for (int i = 0; i < 4; i++) {
          s += "0x"+Long.toHexString(getElement_payload_dcx_status(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqNr
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqNr' is signed (false).
     */
    public static boolean isSigned_header_seqNr() {
        return false;
    }

    /**
     * Return whether the field 'header.seqNr' is an array (false).
     */
    public static boolean isArray_header_seqNr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqNr'
     */
    public static int offset_header_seqNr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqNr'
     */
    public static int offsetBits_header_seqNr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.seqNr'
     */
    public int get_header_seqNr() {
        return (int)getUIntBEElement(offsetBits_header_seqNr(), 16);
    }

    /**
     * Set the value of the field 'header.seqNr'
     */
    public void set_header_seqNr(int value) {
        setUIntBEElement(offsetBits_header_seqNr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqNr'
     */
    public static int size_header_seqNr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqNr'
     */
    public static int sizeBits_header_seqNr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.originatorID
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.originatorID' is signed (false).
     */
    public static boolean isSigned_header_originatorID() {
        return false;
    }

    /**
     * Return whether the field 'header.originatorID' is an array (false).
     */
    public static boolean isArray_header_originatorID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.originatorID'
     */
    public static int offset_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.originatorID'
     */
    public static int offsetBits_header_originatorID() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.originatorID'
     */
    public int get_header_originatorID() {
        return (int)getUIntBEElement(offsetBits_header_originatorID(), 16);
    }

    /**
     * Set the value of the field 'header.originatorID'
     */
    public void set_header_originatorID(int value) {
        setUIntBEElement(offsetBits_header_originatorID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.originatorID'
     */
    public static int size_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.originatorID'
     */
    public static int sizeBits_header_originatorID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.low
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.low' is signed (false).
     */
    public static boolean isSigned_header_aTime_low() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.low' is an array (false).
     */
    public static boolean isArray_header_aTime_low() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.low'
     */
    public static int offset_header_aTime_low() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.low'
     */
    public static int offsetBits_header_aTime_low() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'header.aTime.low'
     */
    public int get_header_aTime_low() {
        return (int)getUIntBEElement(offsetBits_header_aTime_low(), 16);
    }

    /**
     * Set the value of the field 'header.aTime.low'
     */
    public void set_header_aTime_low(int value) {
        setUIntBEElement(offsetBits_header_aTime_low(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.low'
     */
    public static int size_header_aTime_low() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.low'
     */
    public static int sizeBits_header_aTime_low() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.high
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.high' is signed (false).
     */
    public static boolean isSigned_header_aTime_high() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.high' is an array (false).
     */
    public static boolean isArray_header_aTime_high() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.high'
     */
    public static int offset_header_aTime_high() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.high'
     */
    public static int offsetBits_header_aTime_high() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'header.aTime.high'
     */
    public short get_header_aTime_high() {
        return (short)getUIntBEElement(offsetBits_header_aTime_high(), 8);
    }

    /**
     * Set the value of the field 'header.aTime.high'
     */
    public void set_header_aTime_high(short value) {
        setUIntBEElement(offsetBits_header_aTime_high(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.high'
     */
    public static int size_header_aTime_high() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.high'
     */
    public static int sizeBits_header_aTime_high() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.sample.valid
    //   Field type: byte
    //   Offset (bits): 56
    //   Size (bits): 1
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.sample.valid' is signed (false).
     */
    public static boolean isSigned_payload_sample_valid() {
        return false;
    }

    /**
     * Return whether the field 'payload.sample.valid' is an array (false).
     */
    public static boolean isArray_payload_sample_valid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.sample.valid'
     */
    public static int offset_payload_sample_valid() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.sample.valid'
     */
    public static int offsetBits_payload_sample_valid() {
        return 56;
    }

    /**
     * Return the value (as a byte) of the field 'payload.sample.valid'
     */
    public byte get_payload_sample_valid() {
        return (byte)getUIntBEElement(offsetBits_payload_sample_valid(), 1);
    }

    /**
     * Set the value of the field 'payload.sample.valid'
     */
    public void set_payload_sample_valid(byte value) {
        setUIntBEElement(offsetBits_payload_sample_valid(), 1, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.sample.valid'
     * WARNING: This field is not an even-sized number of bytes (1 bits).
     */
    public static int size_payload_sample_valid() {
        return (1 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.sample.valid'
     */
    public static int sizeBits_payload_sample_valid() {
        return 1;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.sample.no
    //   Field type: short
    //   Offset (bits): 57
    //   Size (bits): 15
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.sample.no' is signed (false).
     */
    public static boolean isSigned_payload_sample_no() {
        return false;
    }

    /**
     * Return whether the field 'payload.sample.no' is an array (false).
     */
    public static boolean isArray_payload_sample_no() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.sample.no'
     * WARNING: This field is not byte-aligned (bit offset 57).
     */
    public static int offset_payload_sample_no() {
        return (57 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.sample.no'
     */
    public static int offsetBits_payload_sample_no() {
        return 57;
    }

    /**
     * Return the value (as a short) of the field 'payload.sample.no'
     */
    public short get_payload_sample_no() {
        return (short)getUIntBEElement(offsetBits_payload_sample_no(), 15);
    }

    /**
     * Set the value of the field 'payload.sample.no'
     */
    public void set_payload_sample_no(short value) {
        setUIntBEElement(offsetBits_payload_sample_no(), 15, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.sample.no'
     * WARNING: This field is not an even-sized number of bytes (15 bits).
     */
    public static int size_payload_sample_no() {
        return (15 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.sample.no'
     */
    public static int sizeBits_payload_sample_no() {
        return 15;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.dcx_batteryStatus
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.dcx_batteryStatus' is signed (false).
     */
    public static boolean isSigned_payload_dcx_batteryStatus() {
        return false;
    }

    /**
     * Return whether the field 'payload.dcx_batteryStatus' is an array (false).
     */
    public static boolean isArray_payload_dcx_batteryStatus() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.dcx_batteryStatus'
     */
    public static int offset_payload_dcx_batteryStatus() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.dcx_batteryStatus'
     */
    public static int offsetBits_payload_dcx_batteryStatus() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'payload.dcx_batteryStatus'
     */
    public short get_payload_dcx_batteryStatus() {
        return (short)getUIntBEElement(offsetBits_payload_dcx_batteryStatus(), 8);
    }

    /**
     * Set the value of the field 'payload.dcx_batteryStatus'
     */
    public void set_payload_dcx_batteryStatus(short value) {
        setUIntBEElement(offsetBits_payload_dcx_batteryStatus(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.dcx_batteryStatus'
     */
    public static int size_payload_dcx_batteryStatus() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.dcx_batteryStatus'
     */
    public static int sizeBits_payload_dcx_batteryStatus() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.dcx.floatvalue
    //   Field type: float[]
    //   Offset (bits): 0
    //   Size of each element (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.dcx.floatvalue' is signed (false).
     */
    public static boolean isSigned_payload_dcx_floatvalue() {
        return false;
    }

    /**
     * Return whether the field 'payload.dcx.floatvalue' is an array (true).
     */
    public static boolean isArray_payload_dcx_floatvalue() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.dcx.floatvalue'
     */
    public static int offset_payload_dcx_floatvalue(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 40;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.dcx.floatvalue'
     */
    public static int offsetBits_payload_dcx_floatvalue(int index1) {
        int offset = 0;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 40;
        return offset;
    }

    /**
     * Return the entire array 'payload.dcx.floatvalue' as a float[]
     */
    public float[] get_payload_dcx_floatvalue() {
        float[] tmp = new float[4];
        for (int index0 = 0; index0 < numElements_payload_dcx_floatvalue(0); index0++) {
            tmp[index0] = getElement_payload_dcx_floatvalue(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'payload.dcx.floatvalue' from the given float[]
     */
    public void set_payload_dcx_floatvalue(float[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_payload_dcx_floatvalue(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a float) of the array 'payload.dcx.floatvalue'
     */
    public float getElement_payload_dcx_floatvalue(int index1) {
        return (float)getFloatElement(offsetBits_payload_dcx_floatvalue(index1), 32);
    }

    /**
     * Set an element of the array 'payload.dcx.floatvalue'
     */
    public void setElement_payload_dcx_floatvalue(int index1, float value) {
        setFloatElement(offsetBits_payload_dcx_floatvalue(index1), 32, value);
    }

    /**
     * Return the total size, in bytes, of the array 'payload.dcx.floatvalue'
     */
    public static int totalSize_payload_dcx_floatvalue() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'payload.dcx.floatvalue'
     */
    public static int totalSizeBits_payload_dcx_floatvalue() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'payload.dcx.floatvalue'
     */
    public static int elementSize_payload_dcx_floatvalue() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'payload.dcx.floatvalue'
     */
    public static int elementSizeBits_payload_dcx_floatvalue() {
        return 32;
    }

    /**
     * Return the number of dimensions in the array 'payload.dcx.floatvalue'
     */
    public static int numDimensions_payload_dcx_floatvalue() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'payload.dcx.floatvalue'
     */
    public static int numElements_payload_dcx_floatvalue() {
        return 4;
    }

    /**
     * Return the number of elements in the array 'payload.dcx.floatvalue'
     * for the given dimension.
     */
    public static int numElements_payload_dcx_floatvalue(int dimension) {
      int array_dims[] = { 4,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.dcx.status
    //   Field type: short[]
    //   Offset (bits): 32
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.dcx.status' is signed (false).
     */
    public static boolean isSigned_payload_dcx_status() {
        return false;
    }

    /**
     * Return whether the field 'payload.dcx.status' is an array (true).
     */
    public static boolean isArray_payload_dcx_status() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.dcx.status'
     */
    public static int offset_payload_dcx_status(int index1) {
        int offset = 32;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 40;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.dcx.status'
     */
    public static int offsetBits_payload_dcx_status(int index1) {
        int offset = 32;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 80 + index1 * 40;
        return offset;
    }

    /**
     * Return the entire array 'payload.dcx.status' as a short[]
     */
    public short[] get_payload_dcx_status() {
        short[] tmp = new short[4];
        for (int index0 = 0; index0 < numElements_payload_dcx_status(0); index0++) {
            tmp[index0] = getElement_payload_dcx_status(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'payload.dcx.status' from the given short[]
     */
    public void set_payload_dcx_status(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_payload_dcx_status(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'payload.dcx.status'
     */
    public short getElement_payload_dcx_status(int index1) {
        return (short)getUIntBEElement(offsetBits_payload_dcx_status(index1), 8);
    }

    /**
     * Set an element of the array 'payload.dcx.status'
     */
    public void setElement_payload_dcx_status(int index1, short value) {
        setUIntBEElement(offsetBits_payload_dcx_status(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'payload.dcx.status'
     */
    public static int totalSize_payload_dcx_status() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'payload.dcx.status'
     */
    public static int totalSizeBits_payload_dcx_status() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'payload.dcx.status'
     */
    public static int elementSize_payload_dcx_status() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'payload.dcx.status'
     */
    public static int elementSizeBits_payload_dcx_status() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'payload.dcx.status'
     */
    public static int numDimensions_payload_dcx_status() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'payload.dcx.status'
     */
    public static int numElements_payload_dcx_status() {
        return 4;
    }

    /**
     * Return the number of elements in the array 'payload.dcx.status'
     * for the given dimension.
     */
    public static int numElements_payload_dcx_status(int dimension) {
      int array_dims[] = { 4,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'payload.dcx.status' with a String
     */
    public void setString_payload_dcx_status(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_payload_dcx_status(i, (short)s.charAt(i));
         }
         setElement_payload_dcx_status(i, (short)0); //null terminate
    }

    /**
     * Read the array 'payload.dcx.status' as a String
     */
    public String getString_payload_dcx_status() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,4)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_payload_dcx_status(i) == (char)0) break;
             carr[i] = (char)getElement_payload_dcx_status(i);
         }
         return new String(carr,0,i);
    }

}
