/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DozerModbusHoldingMsg'
 * message type.
 */

 package ch.epfl.gsn.wrappers.backlog.plugins.tinyos2x;

public class DozerModbusHoldingMsg extends DataHeaderMsg {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 29;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 186;

    /** Create a new DozerModbusHoldingMsg of size 29. */
    public DozerModbusHoldingMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DozerModbusHoldingMsg of the given data_length. */
    public DozerModbusHoldingMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerModbusHoldingMsg with the given data_length
     * and base offset.
     */
    public DozerModbusHoldingMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerModbusHoldingMsg using the given byte array
     * as backing store.
     */
    public DozerModbusHoldingMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerModbusHoldingMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DozerModbusHoldingMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerModbusHoldingMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DozerModbusHoldingMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerModbusHoldingMsg embedded in the given message
     * at the given base offset.
     */
    public DozerModbusHoldingMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerModbusHoldingMsg embedded in the given message
     * at the given base offset and length.
     */
    public DozerModbusHoldingMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DozerModbusHoldingMsg> \n";
      try {
        s += "  [header.seqNr=0x"+Long.toHexString(get_header_seqNr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.originatorID=0x"+Long.toHexString(get_header_originatorID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.low=0x"+Long.toHexString(get_header_aTime_low())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.high=0x"+Long.toHexString(get_header_aTime_high())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.sample.valid=0x"+Long.toHexString(get_payload_sample_valid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.sample.no=0x"+Long.toHexString(get_payload_sample_no())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.slave_address=0x"+Long.toHexString(get_payload_slave_address())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.starting_address=0x"+Long.toHexString(get_payload_starting_address())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.valid_registers=0x"+Long.toHexString(get_payload_valid_registers())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.holding_register1=0x"+Long.toHexString(get_payload_holding_register1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.holding_register2=0x"+Long.toHexString(get_payload_holding_register2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.holding_register3=0x"+Long.toHexString(get_payload_holding_register3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.holding_register4=0x"+Long.toHexString(get_payload_holding_register4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.holding_register5=0x"+Long.toHexString(get_payload_holding_register5())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.holding_register6=0x"+Long.toHexString(get_payload_holding_register6())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.holding_register7=0x"+Long.toHexString(get_payload_holding_register7())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.holding_register8=0x"+Long.toHexString(get_payload_holding_register8())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqNr
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqNr' is signed (false).
     */
    public static boolean isSigned_header_seqNr() {
        return false;
    }

    /**
     * Return whether the field 'header.seqNr' is an array (false).
     */
    public static boolean isArray_header_seqNr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqNr'
     */
    public static int offset_header_seqNr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqNr'
     */
    public static int offsetBits_header_seqNr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.seqNr'
     */
    public int get_header_seqNr() {
        return (int)getUIntBEElement(offsetBits_header_seqNr(), 16);
    }

    /**
     * Set the value of the field 'header.seqNr'
     */
    public void set_header_seqNr(int value) {
        setUIntBEElement(offsetBits_header_seqNr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqNr'
     */
    public static int size_header_seqNr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqNr'
     */
    public static int sizeBits_header_seqNr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.originatorID
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.originatorID' is signed (false).
     */
    public static boolean isSigned_header_originatorID() {
        return false;
    }

    /**
     * Return whether the field 'header.originatorID' is an array (false).
     */
    public static boolean isArray_header_originatorID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.originatorID'
     */
    public static int offset_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.originatorID'
     */
    public static int offsetBits_header_originatorID() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.originatorID'
     */
    public int get_header_originatorID() {
        return (int)getUIntBEElement(offsetBits_header_originatorID(), 16);
    }

    /**
     * Set the value of the field 'header.originatorID'
     */
    public void set_header_originatorID(int value) {
        setUIntBEElement(offsetBits_header_originatorID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.originatorID'
     */
    public static int size_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.originatorID'
     */
    public static int sizeBits_header_originatorID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.low
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.low' is signed (false).
     */
    public static boolean isSigned_header_aTime_low() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.low' is an array (false).
     */
    public static boolean isArray_header_aTime_low() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.low'
     */
    public static int offset_header_aTime_low() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.low'
     */
    public static int offsetBits_header_aTime_low() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'header.aTime.low'
     */
    public int get_header_aTime_low() {
        return (int)getUIntBEElement(offsetBits_header_aTime_low(), 16);
    }

    /**
     * Set the value of the field 'header.aTime.low'
     */
    public void set_header_aTime_low(int value) {
        setUIntBEElement(offsetBits_header_aTime_low(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.low'
     */
    public static int size_header_aTime_low() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.low'
     */
    public static int sizeBits_header_aTime_low() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.high
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.high' is signed (false).
     */
    public static boolean isSigned_header_aTime_high() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.high' is an array (false).
     */
    public static boolean isArray_header_aTime_high() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.high'
     */
    public static int offset_header_aTime_high() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.high'
     */
    public static int offsetBits_header_aTime_high() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'header.aTime.high'
     */
    public short get_header_aTime_high() {
        return (short)getUIntBEElement(offsetBits_header_aTime_high(), 8);
    }

    /**
     * Set the value of the field 'header.aTime.high'
     */
    public void set_header_aTime_high(short value) {
        setUIntBEElement(offsetBits_header_aTime_high(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.high'
     */
    public static int size_header_aTime_high() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.high'
     */
    public static int sizeBits_header_aTime_high() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.sample.valid
    //   Field type: byte
    //   Offset (bits): 56
    //   Size (bits): 1
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.sample.valid' is signed (false).
     */
    public static boolean isSigned_payload_sample_valid() {
        return false;
    }

    /**
     * Return whether the field 'payload.sample.valid' is an array (false).
     */
    public static boolean isArray_payload_sample_valid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.sample.valid'
     */
    public static int offset_payload_sample_valid() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.sample.valid'
     */
    public static int offsetBits_payload_sample_valid() {
        return 56;
    }

    /**
     * Return the value (as a byte) of the field 'payload.sample.valid'
     */
    public byte get_payload_sample_valid() {
        return (byte)getUIntBEElement(offsetBits_payload_sample_valid(), 1);
    }

    /**
     * Set the value of the field 'payload.sample.valid'
     */
    public void set_payload_sample_valid(byte value) {
        setUIntBEElement(offsetBits_payload_sample_valid(), 1, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.sample.valid'
     * WARNING: This field is not an even-sized number of bytes (1 bits).
     */
    public static int size_payload_sample_valid() {
        return (1 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.sample.valid'
     */
    public static int sizeBits_payload_sample_valid() {
        return 1;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.sample.no
    //   Field type: short
    //   Offset (bits): 57
    //   Size (bits): 15
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.sample.no' is signed (false).
     */
    public static boolean isSigned_payload_sample_no() {
        return false;
    }

    /**
     * Return whether the field 'payload.sample.no' is an array (false).
     */
    public static boolean isArray_payload_sample_no() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.sample.no'
     * WARNING: This field is not byte-aligned (bit offset 57).
     */
    public static int offset_payload_sample_no() {
        return (57 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.sample.no'
     */
    public static int offsetBits_payload_sample_no() {
        return 57;
    }

    /**
     * Return the value (as a short) of the field 'payload.sample.no'
     */
    public short get_payload_sample_no() {
        return (short)getUIntBEElement(offsetBits_payload_sample_no(), 15);
    }

    /**
     * Set the value of the field 'payload.sample.no'
     */
    public void set_payload_sample_no(short value) {
        setUIntBEElement(offsetBits_payload_sample_no(), 15, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.sample.no'
     * WARNING: This field is not an even-sized number of bytes (15 bits).
     */
    public static int size_payload_sample_no() {
        return (15 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.sample.no'
     */
    public static int sizeBits_payload_sample_no() {
        return 15;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.slave_address
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.slave_address' is signed (false).
     */
    public static boolean isSigned_payload_slave_address() {
        return false;
    }

    /**
     * Return whether the field 'payload.slave_address' is an array (false).
     */
    public static boolean isArray_payload_slave_address() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.slave_address'
     */
    public static int offset_payload_slave_address() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.slave_address'
     */
    public static int offsetBits_payload_slave_address() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'payload.slave_address'
     */
    public short get_payload_slave_address() {
        return (short)getUIntBEElement(offsetBits_payload_slave_address(), 8);
    }

    /**
     * Set the value of the field 'payload.slave_address'
     */
    public void set_payload_slave_address(short value) {
        setUIntBEElement(offsetBits_payload_slave_address(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.slave_address'
     */
    public static int size_payload_slave_address() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.slave_address'
     */
    public static int sizeBits_payload_slave_address() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.starting_address
    //   Field type: int
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.starting_address' is signed (false).
     */
    public static boolean isSigned_payload_starting_address() {
        return false;
    }

    /**
     * Return whether the field 'payload.starting_address' is an array (false).
     */
    public static boolean isArray_payload_starting_address() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.starting_address'
     */
    public static int offset_payload_starting_address() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.starting_address'
     */
    public static int offsetBits_payload_starting_address() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'payload.starting_address'
     */
    public int get_payload_starting_address() {
        return (int)getUIntBEElement(offsetBits_payload_starting_address(), 16);
    }

    /**
     * Set the value of the field 'payload.starting_address'
     */
    public void set_payload_starting_address(int value) {
        setUIntBEElement(offsetBits_payload_starting_address(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.starting_address'
     */
    public static int size_payload_starting_address() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.starting_address'
     */
    public static int sizeBits_payload_starting_address() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.valid_registers
    //   Field type: short
    //   Offset (bits): 96
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.valid_registers' is signed (false).
     */
    public static boolean isSigned_payload_valid_registers() {
        return false;
    }

    /**
     * Return whether the field 'payload.valid_registers' is an array (false).
     */
    public static boolean isArray_payload_valid_registers() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.valid_registers'
     */
    public static int offset_payload_valid_registers() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.valid_registers'
     */
    public static int offsetBits_payload_valid_registers() {
        return 96;
    }

    /**
     * Return the value (as a short) of the field 'payload.valid_registers'
     */
    public short get_payload_valid_registers() {
        return (short)getUIntBEElement(offsetBits_payload_valid_registers(), 8);
    }

    /**
     * Set the value of the field 'payload.valid_registers'
     */
    public void set_payload_valid_registers(short value) {
        setUIntBEElement(offsetBits_payload_valid_registers(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.valid_registers'
     */
    public static int size_payload_valid_registers() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.valid_registers'
     */
    public static int sizeBits_payload_valid_registers() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.holding_register1
    //   Field type: int
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.holding_register1' is signed (false).
     */
    public static boolean isSigned_payload_holding_register1() {
        return false;
    }

    /**
     * Return whether the field 'payload.holding_register1' is an array (false).
     */
    public static boolean isArray_payload_holding_register1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.holding_register1'
     */
    public static int offset_payload_holding_register1() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.holding_register1'
     */
    public static int offsetBits_payload_holding_register1() {
        return 104;
    }

    /**
     * Return the value (as a int) of the field 'payload.holding_register1'
     */
    public int get_payload_holding_register1() {
        return (int)getUIntBEElement(offsetBits_payload_holding_register1(), 16);
    }

    /**
     * Set the value of the field 'payload.holding_register1'
     */
    public void set_payload_holding_register1(int value) {
        setUIntBEElement(offsetBits_payload_holding_register1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.holding_register1'
     */
    public static int size_payload_holding_register1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.holding_register1'
     */
    public static int sizeBits_payload_holding_register1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.holding_register2
    //   Field type: int
    //   Offset (bits): 120
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.holding_register2' is signed (false).
     */
    public static boolean isSigned_payload_holding_register2() {
        return false;
    }

    /**
     * Return whether the field 'payload.holding_register2' is an array (false).
     */
    public static boolean isArray_payload_holding_register2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.holding_register2'
     */
    public static int offset_payload_holding_register2() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.holding_register2'
     */
    public static int offsetBits_payload_holding_register2() {
        return 120;
    }

    /**
     * Return the value (as a int) of the field 'payload.holding_register2'
     */
    public int get_payload_holding_register2() {
        return (int)getUIntBEElement(offsetBits_payload_holding_register2(), 16);
    }

    /**
     * Set the value of the field 'payload.holding_register2'
     */
    public void set_payload_holding_register2(int value) {
        setUIntBEElement(offsetBits_payload_holding_register2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.holding_register2'
     */
    public static int size_payload_holding_register2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.holding_register2'
     */
    public static int sizeBits_payload_holding_register2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.holding_register3
    //   Field type: int
    //   Offset (bits): 136
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.holding_register3' is signed (false).
     */
    public static boolean isSigned_payload_holding_register3() {
        return false;
    }

    /**
     * Return whether the field 'payload.holding_register3' is an array (false).
     */
    public static boolean isArray_payload_holding_register3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.holding_register3'
     */
    public static int offset_payload_holding_register3() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.holding_register3'
     */
    public static int offsetBits_payload_holding_register3() {
        return 136;
    }

    /**
     * Return the value (as a int) of the field 'payload.holding_register3'
     */
    public int get_payload_holding_register3() {
        return (int)getUIntBEElement(offsetBits_payload_holding_register3(), 16);
    }

    /**
     * Set the value of the field 'payload.holding_register3'
     */
    public void set_payload_holding_register3(int value) {
        setUIntBEElement(offsetBits_payload_holding_register3(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.holding_register3'
     */
    public static int size_payload_holding_register3() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.holding_register3'
     */
    public static int sizeBits_payload_holding_register3() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.holding_register4
    //   Field type: int
    //   Offset (bits): 152
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.holding_register4' is signed (false).
     */
    public static boolean isSigned_payload_holding_register4() {
        return false;
    }

    /**
     * Return whether the field 'payload.holding_register4' is an array (false).
     */
    public static boolean isArray_payload_holding_register4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.holding_register4'
     */
    public static int offset_payload_holding_register4() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.holding_register4'
     */
    public static int offsetBits_payload_holding_register4() {
        return 152;
    }

    /**
     * Return the value (as a int) of the field 'payload.holding_register4'
     */
    public int get_payload_holding_register4() {
        return (int)getUIntBEElement(offsetBits_payload_holding_register4(), 16);
    }

    /**
     * Set the value of the field 'payload.holding_register4'
     */
    public void set_payload_holding_register4(int value) {
        setUIntBEElement(offsetBits_payload_holding_register4(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.holding_register4'
     */
    public static int size_payload_holding_register4() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.holding_register4'
     */
    public static int sizeBits_payload_holding_register4() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.holding_register5
    //   Field type: int
    //   Offset (bits): 168
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.holding_register5' is signed (false).
     */
    public static boolean isSigned_payload_holding_register5() {
        return false;
    }

    /**
     * Return whether the field 'payload.holding_register5' is an array (false).
     */
    public static boolean isArray_payload_holding_register5() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.holding_register5'
     */
    public static int offset_payload_holding_register5() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.holding_register5'
     */
    public static int offsetBits_payload_holding_register5() {
        return 168;
    }

    /**
     * Return the value (as a int) of the field 'payload.holding_register5'
     */
    public int get_payload_holding_register5() {
        return (int)getUIntBEElement(offsetBits_payload_holding_register5(), 16);
    }

    /**
     * Set the value of the field 'payload.holding_register5'
     */
    public void set_payload_holding_register5(int value) {
        setUIntBEElement(offsetBits_payload_holding_register5(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.holding_register5'
     */
    public static int size_payload_holding_register5() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.holding_register5'
     */
    public static int sizeBits_payload_holding_register5() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.holding_register6
    //   Field type: int
    //   Offset (bits): 184
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.holding_register6' is signed (false).
     */
    public static boolean isSigned_payload_holding_register6() {
        return false;
    }

    /**
     * Return whether the field 'payload.holding_register6' is an array (false).
     */
    public static boolean isArray_payload_holding_register6() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.holding_register6'
     */
    public static int offset_payload_holding_register6() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.holding_register6'
     */
    public static int offsetBits_payload_holding_register6() {
        return 184;
    }

    /**
     * Return the value (as a int) of the field 'payload.holding_register6'
     */
    public int get_payload_holding_register6() {
        return (int)getUIntBEElement(offsetBits_payload_holding_register6(), 16);
    }

    /**
     * Set the value of the field 'payload.holding_register6'
     */
    public void set_payload_holding_register6(int value) {
        setUIntBEElement(offsetBits_payload_holding_register6(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.holding_register6'
     */
    public static int size_payload_holding_register6() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.holding_register6'
     */
    public static int sizeBits_payload_holding_register6() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.holding_register7
    //   Field type: int
    //   Offset (bits): 200
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.holding_register7' is signed (false).
     */
    public static boolean isSigned_payload_holding_register7() {
        return false;
    }

    /**
     * Return whether the field 'payload.holding_register7' is an array (false).
     */
    public static boolean isArray_payload_holding_register7() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.holding_register7'
     */
    public static int offset_payload_holding_register7() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.holding_register7'
     */
    public static int offsetBits_payload_holding_register7() {
        return 200;
    }

    /**
     * Return the value (as a int) of the field 'payload.holding_register7'
     */
    public int get_payload_holding_register7() {
        return (int)getUIntBEElement(offsetBits_payload_holding_register7(), 16);
    }

    /**
     * Set the value of the field 'payload.holding_register7'
     */
    public void set_payload_holding_register7(int value) {
        setUIntBEElement(offsetBits_payload_holding_register7(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.holding_register7'
     */
    public static int size_payload_holding_register7() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.holding_register7'
     */
    public static int sizeBits_payload_holding_register7() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.holding_register8
    //   Field type: int
    //   Offset (bits): 216
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.holding_register8' is signed (false).
     */
    public static boolean isSigned_payload_holding_register8() {
        return false;
    }

    /**
     * Return whether the field 'payload.holding_register8' is an array (false).
     */
    public static boolean isArray_payload_holding_register8() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.holding_register8'
     */
    public static int offset_payload_holding_register8() {
        return (216 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.holding_register8'
     */
    public static int offsetBits_payload_holding_register8() {
        return 216;
    }

    /**
     * Return the value (as a int) of the field 'payload.holding_register8'
     */
    public int get_payload_holding_register8() {
        return (int)getUIntBEElement(offsetBits_payload_holding_register8(), 16);
    }

    /**
     * Set the value of the field 'payload.holding_register8'
     */
    public void set_payload_holding_register8(int value) {
        setUIntBEElement(offsetBits_payload_holding_register8(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.holding_register8'
     */
    public static int size_payload_holding_register8() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.holding_register8'
     */
    public static int sizeBits_payload_holding_register8() {
        return 16;
    }

}
