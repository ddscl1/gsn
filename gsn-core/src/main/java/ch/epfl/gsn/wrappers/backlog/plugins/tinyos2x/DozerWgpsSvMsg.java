/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DozerWgpsSvMsg'
 * message type.
 */

 package ch.epfl.gsn.wrappers.backlog.plugins.tinyos2x;

public class DozerWgpsSvMsg extends DataHeaderMsg {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 29;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 190;

    /** Create a new DozerWgpsSvMsg of size 29. */
    public DozerWgpsSvMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DozerWgpsSvMsg of the given data_length. */
    public DozerWgpsSvMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsSvMsg with the given data_length
     * and base offset.
     */
    public DozerWgpsSvMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsSvMsg using the given byte array
     * as backing store.
     */
    public DozerWgpsSvMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsSvMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DozerWgpsSvMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsSvMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DozerWgpsSvMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsSvMsg embedded in the given message
     * at the given base offset.
     */
    public DozerWgpsSvMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsSvMsg embedded in the given message
     * at the given base offset and length.
     */
    public DozerWgpsSvMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DozerWgpsSvMsg> \n";
      try {
        s += "  [header.seqNr=0x"+Long.toHexString(get_header_seqNr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.originatorID=0x"+Long.toHexString(get_header_originatorID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.low=0x"+Long.toHexString(get_header_aTime_low())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.high=0x"+Long.toHexString(get_header_aTime_high())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.gps_time=0x"+Long.toHexString(get_payload_gps_time())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.gps_week=0x"+Long.toHexString(get_payload_gps_week())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.num_sv=0x"+Long.toHexString(get_payload_num_sv())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrier_phase_i0=0x"+Long.toHexString(get_payload_carrier_phase_i0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrier_phase_i1=0x"+Long.toHexString(get_payload_carrier_phase_i1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrier_phase_i2=0x"+Long.toHexString(get_payload_carrier_phase_i2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrier_phase_i3=0x"+Long.toHexString(get_payload_carrier_phase_i3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.carrier_phase_i4=0x"+Long.toHexString(get_payload_carrier_phase_i4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudo_range_i0=0x"+Long.toHexString(get_payload_pseudo_range_i0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudo_range_i1=0x"+Long.toHexString(get_payload_pseudo_range_i1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudo_range_i2=0x"+Long.toHexString(get_payload_pseudo_range_i2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudo_range_i3=0x"+Long.toHexString(get_payload_pseudo_range_i3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.pseudo_range_i4=0x"+Long.toHexString(get_payload_pseudo_range_i4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.doppler_i0=0x"+Long.toHexString(get_payload_doppler_i0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.doppler_i1=0x"+Long.toHexString(get_payload_doppler_i1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.doppler_i2=0x"+Long.toHexString(get_payload_doppler_i2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.measurement_quality=0x"+Long.toHexString(get_payload_measurement_quality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.space_vehicle=0x"+Long.toHexString(get_payload_space_vehicle())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.loss_of_lock=0x"+Long.toHexString(get_payload_loss_of_lock())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.signal_strength=0x"+Long.toHexString(get_payload_signal_strength())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqNr
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqNr' is signed (false).
     */
    public static boolean isSigned_header_seqNr() {
        return false;
    }

    /**
     * Return whether the field 'header.seqNr' is an array (false).
     */
    public static boolean isArray_header_seqNr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqNr'
     */
    public static int offset_header_seqNr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqNr'
     */
    public static int offsetBits_header_seqNr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.seqNr'
     */
    public int get_header_seqNr() {
        return (int)getUIntBEElement(offsetBits_header_seqNr(), 16);
    }

    /**
     * Set the value of the field 'header.seqNr'
     */
    public void set_header_seqNr(int value) {
        setUIntBEElement(offsetBits_header_seqNr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqNr'
     */
    public static int size_header_seqNr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqNr'
     */
    public static int sizeBits_header_seqNr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.originatorID
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.originatorID' is signed (false).
     */
    public static boolean isSigned_header_originatorID() {
        return false;
    }

    /**
     * Return whether the field 'header.originatorID' is an array (false).
     */
    public static boolean isArray_header_originatorID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.originatorID'
     */
    public static int offset_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.originatorID'
     */
    public static int offsetBits_header_originatorID() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.originatorID'
     */
    public int get_header_originatorID() {
        return (int)getUIntBEElement(offsetBits_header_originatorID(), 16);
    }

    /**
     * Set the value of the field 'header.originatorID'
     */
    public void set_header_originatorID(int value) {
        setUIntBEElement(offsetBits_header_originatorID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.originatorID'
     */
    public static int size_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.originatorID'
     */
    public static int sizeBits_header_originatorID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.low
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.low' is signed (false).
     */
    public static boolean isSigned_header_aTime_low() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.low' is an array (false).
     */
    public static boolean isArray_header_aTime_low() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.low'
     */
    public static int offset_header_aTime_low() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.low'
     */
    public static int offsetBits_header_aTime_low() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'header.aTime.low'
     */
    public int get_header_aTime_low() {
        return (int)getUIntBEElement(offsetBits_header_aTime_low(), 16);
    }

    /**
     * Set the value of the field 'header.aTime.low'
     */
    public void set_header_aTime_low(int value) {
        setUIntBEElement(offsetBits_header_aTime_low(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.low'
     */
    public static int size_header_aTime_low() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.low'
     */
    public static int sizeBits_header_aTime_low() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.high
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.high' is signed (false).
     */
    public static boolean isSigned_header_aTime_high() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.high' is an array (false).
     */
    public static boolean isArray_header_aTime_high() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.high'
     */
    public static int offset_header_aTime_high() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.high'
     */
    public static int offsetBits_header_aTime_high() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'header.aTime.high'
     */
    public short get_header_aTime_high() {
        return (short)getUIntBEElement(offsetBits_header_aTime_high(), 8);
    }

    /**
     * Set the value of the field 'header.aTime.high'
     */
    public void set_header_aTime_high(short value) {
        setUIntBEElement(offsetBits_header_aTime_high(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.high'
     */
    public static int size_header_aTime_high() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.high'
     */
    public static int sizeBits_header_aTime_high() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.gps_time
    //   Field type: long
    //   Offset (bits): 56
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.gps_time' is signed (false).
     */
    public static boolean isSigned_payload_gps_time() {
        return false;
    }

    /**
     * Return whether the field 'payload.gps_time' is an array (false).
     */
    public static boolean isArray_payload_gps_time() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.gps_time'
     */
    public static int offset_payload_gps_time() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.gps_time'
     */
    public static int offsetBits_payload_gps_time() {
        return 56;
    }

    /**
     * Return the value (as a long) of the field 'payload.gps_time'
     */
    public long get_payload_gps_time() {
        return (long)getUIntBEElement(offsetBits_payload_gps_time(), 32);
    }

    /**
     * Set the value of the field 'payload.gps_time'
     */
    public void set_payload_gps_time(long value) {
        setUIntBEElement(offsetBits_payload_gps_time(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.gps_time'
     */
    public static int size_payload_gps_time() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.gps_time'
     */
    public static int sizeBits_payload_gps_time() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.gps_week
    //   Field type: int
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.gps_week' is signed (false).
     */
    public static boolean isSigned_payload_gps_week() {
        return false;
    }

    /**
     * Return whether the field 'payload.gps_week' is an array (false).
     */
    public static boolean isArray_payload_gps_week() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.gps_week'
     */
    public static int offset_payload_gps_week() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.gps_week'
     */
    public static int offsetBits_payload_gps_week() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'payload.gps_week'
     */
    public int get_payload_gps_week() {
        return (int)getUIntBEElement(offsetBits_payload_gps_week(), 16);
    }

    /**
     * Set the value of the field 'payload.gps_week'
     */
    public void set_payload_gps_week(int value) {
        setUIntBEElement(offsetBits_payload_gps_week(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.gps_week'
     */
    public static int size_payload_gps_week() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.gps_week'
     */
    public static int sizeBits_payload_gps_week() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.num_sv
    //   Field type: short
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.num_sv' is signed (false).
     */
    public static boolean isSigned_payload_num_sv() {
        return false;
    }

    /**
     * Return whether the field 'payload.num_sv' is an array (false).
     */
    public static boolean isArray_payload_num_sv() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.num_sv'
     */
    public static int offset_payload_num_sv() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.num_sv'
     */
    public static int offsetBits_payload_num_sv() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'payload.num_sv'
     */
    public short get_payload_num_sv() {
        return (short)getUIntBEElement(offsetBits_payload_num_sv(), 8);
    }

    /**
     * Set the value of the field 'payload.num_sv'
     */
    public void set_payload_num_sv(short value) {
        setUIntBEElement(offsetBits_payload_num_sv(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.num_sv'
     */
    public static int size_payload_num_sv() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.num_sv'
     */
    public static int sizeBits_payload_num_sv() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrier_phase_i0
    //   Field type: short
    //   Offset (bits): 112
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrier_phase_i0' is signed (false).
     */
    public static boolean isSigned_payload_carrier_phase_i0() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrier_phase_i0' is an array (false).
     */
    public static boolean isArray_payload_carrier_phase_i0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrier_phase_i0'
     */
    public static int offset_payload_carrier_phase_i0() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrier_phase_i0'
     */
    public static int offsetBits_payload_carrier_phase_i0() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrier_phase_i0'
     */
    public short get_payload_carrier_phase_i0() {
        return (short)getUIntBEElement(offsetBits_payload_carrier_phase_i0(), 8);
    }

    /**
     * Set the value of the field 'payload.carrier_phase_i0'
     */
    public void set_payload_carrier_phase_i0(short value) {
        setUIntBEElement(offsetBits_payload_carrier_phase_i0(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrier_phase_i0'
     */
    public static int size_payload_carrier_phase_i0() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrier_phase_i0'
     */
    public static int sizeBits_payload_carrier_phase_i0() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrier_phase_i1
    //   Field type: short
    //   Offset (bits): 120
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrier_phase_i1' is signed (false).
     */
    public static boolean isSigned_payload_carrier_phase_i1() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrier_phase_i1' is an array (false).
     */
    public static boolean isArray_payload_carrier_phase_i1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrier_phase_i1'
     */
    public static int offset_payload_carrier_phase_i1() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrier_phase_i1'
     */
    public static int offsetBits_payload_carrier_phase_i1() {
        return 120;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrier_phase_i1'
     */
    public short get_payload_carrier_phase_i1() {
        return (short)getUIntBEElement(offsetBits_payload_carrier_phase_i1(), 8);
    }

    /**
     * Set the value of the field 'payload.carrier_phase_i1'
     */
    public void set_payload_carrier_phase_i1(short value) {
        setUIntBEElement(offsetBits_payload_carrier_phase_i1(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrier_phase_i1'
     */
    public static int size_payload_carrier_phase_i1() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrier_phase_i1'
     */
    public static int sizeBits_payload_carrier_phase_i1() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrier_phase_i2
    //   Field type: short
    //   Offset (bits): 128
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrier_phase_i2' is signed (false).
     */
    public static boolean isSigned_payload_carrier_phase_i2() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrier_phase_i2' is an array (false).
     */
    public static boolean isArray_payload_carrier_phase_i2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrier_phase_i2'
     */
    public static int offset_payload_carrier_phase_i2() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrier_phase_i2'
     */
    public static int offsetBits_payload_carrier_phase_i2() {
        return 128;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrier_phase_i2'
     */
    public short get_payload_carrier_phase_i2() {
        return (short)getUIntBEElement(offsetBits_payload_carrier_phase_i2(), 8);
    }

    /**
     * Set the value of the field 'payload.carrier_phase_i2'
     */
    public void set_payload_carrier_phase_i2(short value) {
        setUIntBEElement(offsetBits_payload_carrier_phase_i2(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrier_phase_i2'
     */
    public static int size_payload_carrier_phase_i2() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrier_phase_i2'
     */
    public static int sizeBits_payload_carrier_phase_i2() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrier_phase_i3
    //   Field type: short
    //   Offset (bits): 136
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrier_phase_i3' is signed (false).
     */
    public static boolean isSigned_payload_carrier_phase_i3() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrier_phase_i3' is an array (false).
     */
    public static boolean isArray_payload_carrier_phase_i3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrier_phase_i3'
     */
    public static int offset_payload_carrier_phase_i3() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrier_phase_i3'
     */
    public static int offsetBits_payload_carrier_phase_i3() {
        return 136;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrier_phase_i3'
     */
    public short get_payload_carrier_phase_i3() {
        return (short)getUIntBEElement(offsetBits_payload_carrier_phase_i3(), 8);
    }

    /**
     * Set the value of the field 'payload.carrier_phase_i3'
     */
    public void set_payload_carrier_phase_i3(short value) {
        setUIntBEElement(offsetBits_payload_carrier_phase_i3(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrier_phase_i3'
     */
    public static int size_payload_carrier_phase_i3() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrier_phase_i3'
     */
    public static int sizeBits_payload_carrier_phase_i3() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.carrier_phase_i4
    //   Field type: short
    //   Offset (bits): 144
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.carrier_phase_i4' is signed (false).
     */
    public static boolean isSigned_payload_carrier_phase_i4() {
        return false;
    }

    /**
     * Return whether the field 'payload.carrier_phase_i4' is an array (false).
     */
    public static boolean isArray_payload_carrier_phase_i4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.carrier_phase_i4'
     */
    public static int offset_payload_carrier_phase_i4() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.carrier_phase_i4'
     */
    public static int offsetBits_payload_carrier_phase_i4() {
        return 144;
    }

    /**
     * Return the value (as a short) of the field 'payload.carrier_phase_i4'
     */
    public short get_payload_carrier_phase_i4() {
        return (short)getUIntBEElement(offsetBits_payload_carrier_phase_i4(), 8);
    }

    /**
     * Set the value of the field 'payload.carrier_phase_i4'
     */
    public void set_payload_carrier_phase_i4(short value) {
        setUIntBEElement(offsetBits_payload_carrier_phase_i4(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.carrier_phase_i4'
     */
    public static int size_payload_carrier_phase_i4() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.carrier_phase_i4'
     */
    public static int sizeBits_payload_carrier_phase_i4() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudo_range_i0
    //   Field type: short
    //   Offset (bits): 152
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudo_range_i0' is signed (false).
     */
    public static boolean isSigned_payload_pseudo_range_i0() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudo_range_i0' is an array (false).
     */
    public static boolean isArray_payload_pseudo_range_i0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudo_range_i0'
     */
    public static int offset_payload_pseudo_range_i0() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudo_range_i0'
     */
    public static int offsetBits_payload_pseudo_range_i0() {
        return 152;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudo_range_i0'
     */
    public short get_payload_pseudo_range_i0() {
        return (short)getUIntBEElement(offsetBits_payload_pseudo_range_i0(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudo_range_i0'
     */
    public void set_payload_pseudo_range_i0(short value) {
        setUIntBEElement(offsetBits_payload_pseudo_range_i0(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudo_range_i0'
     */
    public static int size_payload_pseudo_range_i0() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudo_range_i0'
     */
    public static int sizeBits_payload_pseudo_range_i0() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudo_range_i1
    //   Field type: short
    //   Offset (bits): 160
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudo_range_i1' is signed (false).
     */
    public static boolean isSigned_payload_pseudo_range_i1() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudo_range_i1' is an array (false).
     */
    public static boolean isArray_payload_pseudo_range_i1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudo_range_i1'
     */
    public static int offset_payload_pseudo_range_i1() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudo_range_i1'
     */
    public static int offsetBits_payload_pseudo_range_i1() {
        return 160;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudo_range_i1'
     */
    public short get_payload_pseudo_range_i1() {
        return (short)getUIntBEElement(offsetBits_payload_pseudo_range_i1(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudo_range_i1'
     */
    public void set_payload_pseudo_range_i1(short value) {
        setUIntBEElement(offsetBits_payload_pseudo_range_i1(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudo_range_i1'
     */
    public static int size_payload_pseudo_range_i1() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudo_range_i1'
     */
    public static int sizeBits_payload_pseudo_range_i1() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudo_range_i2
    //   Field type: short
    //   Offset (bits): 168
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudo_range_i2' is signed (false).
     */
    public static boolean isSigned_payload_pseudo_range_i2() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudo_range_i2' is an array (false).
     */
    public static boolean isArray_payload_pseudo_range_i2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudo_range_i2'
     */
    public static int offset_payload_pseudo_range_i2() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudo_range_i2'
     */
    public static int offsetBits_payload_pseudo_range_i2() {
        return 168;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudo_range_i2'
     */
    public short get_payload_pseudo_range_i2() {
        return (short)getUIntBEElement(offsetBits_payload_pseudo_range_i2(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudo_range_i2'
     */
    public void set_payload_pseudo_range_i2(short value) {
        setUIntBEElement(offsetBits_payload_pseudo_range_i2(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudo_range_i2'
     */
    public static int size_payload_pseudo_range_i2() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudo_range_i2'
     */
    public static int sizeBits_payload_pseudo_range_i2() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudo_range_i3
    //   Field type: short
    //   Offset (bits): 176
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudo_range_i3' is signed (false).
     */
    public static boolean isSigned_payload_pseudo_range_i3() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudo_range_i3' is an array (false).
     */
    public static boolean isArray_payload_pseudo_range_i3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudo_range_i3'
     */
    public static int offset_payload_pseudo_range_i3() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudo_range_i3'
     */
    public static int offsetBits_payload_pseudo_range_i3() {
        return 176;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudo_range_i3'
     */
    public short get_payload_pseudo_range_i3() {
        return (short)getUIntBEElement(offsetBits_payload_pseudo_range_i3(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudo_range_i3'
     */
    public void set_payload_pseudo_range_i3(short value) {
        setUIntBEElement(offsetBits_payload_pseudo_range_i3(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudo_range_i3'
     */
    public static int size_payload_pseudo_range_i3() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudo_range_i3'
     */
    public static int sizeBits_payload_pseudo_range_i3() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.pseudo_range_i4
    //   Field type: short
    //   Offset (bits): 184
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.pseudo_range_i4' is signed (false).
     */
    public static boolean isSigned_payload_pseudo_range_i4() {
        return false;
    }

    /**
     * Return whether the field 'payload.pseudo_range_i4' is an array (false).
     */
    public static boolean isArray_payload_pseudo_range_i4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.pseudo_range_i4'
     */
    public static int offset_payload_pseudo_range_i4() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.pseudo_range_i4'
     */
    public static int offsetBits_payload_pseudo_range_i4() {
        return 184;
    }

    /**
     * Return the value (as a short) of the field 'payload.pseudo_range_i4'
     */
    public short get_payload_pseudo_range_i4() {
        return (short)getUIntBEElement(offsetBits_payload_pseudo_range_i4(), 8);
    }

    /**
     * Set the value of the field 'payload.pseudo_range_i4'
     */
    public void set_payload_pseudo_range_i4(short value) {
        setUIntBEElement(offsetBits_payload_pseudo_range_i4(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.pseudo_range_i4'
     */
    public static int size_payload_pseudo_range_i4() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.pseudo_range_i4'
     */
    public static int sizeBits_payload_pseudo_range_i4() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.doppler_i0
    //   Field type: short
    //   Offset (bits): 192
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.doppler_i0' is signed (false).
     */
    public static boolean isSigned_payload_doppler_i0() {
        return false;
    }

    /**
     * Return whether the field 'payload.doppler_i0' is an array (false).
     */
    public static boolean isArray_payload_doppler_i0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.doppler_i0'
     */
    public static int offset_payload_doppler_i0() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.doppler_i0'
     */
    public static int offsetBits_payload_doppler_i0() {
        return 192;
    }

    /**
     * Return the value (as a short) of the field 'payload.doppler_i0'
     */
    public short get_payload_doppler_i0() {
        return (short)getUIntBEElement(offsetBits_payload_doppler_i0(), 8);
    }

    /**
     * Set the value of the field 'payload.doppler_i0'
     */
    public void set_payload_doppler_i0(short value) {
        setUIntBEElement(offsetBits_payload_doppler_i0(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.doppler_i0'
     */
    public static int size_payload_doppler_i0() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.doppler_i0'
     */
    public static int sizeBits_payload_doppler_i0() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.doppler_i1
    //   Field type: short
    //   Offset (bits): 200
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.doppler_i1' is signed (false).
     */
    public static boolean isSigned_payload_doppler_i1() {
        return false;
    }

    /**
     * Return whether the field 'payload.doppler_i1' is an array (false).
     */
    public static boolean isArray_payload_doppler_i1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.doppler_i1'
     */
    public static int offset_payload_doppler_i1() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.doppler_i1'
     */
    public static int offsetBits_payload_doppler_i1() {
        return 200;
    }

    /**
     * Return the value (as a short) of the field 'payload.doppler_i1'
     */
    public short get_payload_doppler_i1() {
        return (short)getUIntBEElement(offsetBits_payload_doppler_i1(), 8);
    }

    /**
     * Set the value of the field 'payload.doppler_i1'
     */
    public void set_payload_doppler_i1(short value) {
        setUIntBEElement(offsetBits_payload_doppler_i1(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.doppler_i1'
     */
    public static int size_payload_doppler_i1() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.doppler_i1'
     */
    public static int sizeBits_payload_doppler_i1() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.doppler_i2
    //   Field type: short
    //   Offset (bits): 208
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.doppler_i2' is signed (false).
     */
    public static boolean isSigned_payload_doppler_i2() {
        return false;
    }

    /**
     * Return whether the field 'payload.doppler_i2' is an array (false).
     */
    public static boolean isArray_payload_doppler_i2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.doppler_i2'
     */
    public static int offset_payload_doppler_i2() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.doppler_i2'
     */
    public static int offsetBits_payload_doppler_i2() {
        return 208;
    }

    /**
     * Return the value (as a short) of the field 'payload.doppler_i2'
     */
    public short get_payload_doppler_i2() {
        return (short)getUIntBEElement(offsetBits_payload_doppler_i2(), 8);
    }

    /**
     * Set the value of the field 'payload.doppler_i2'
     */
    public void set_payload_doppler_i2(short value) {
        setUIntBEElement(offsetBits_payload_doppler_i2(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.doppler_i2'
     */
    public static int size_payload_doppler_i2() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.doppler_i2'
     */
    public static int sizeBits_payload_doppler_i2() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.measurement_quality
    //   Field type: byte
    //   Offset (bits): 216
    //   Size (bits): 2
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.measurement_quality' is signed (false).
     */
    public static boolean isSigned_payload_measurement_quality() {
        return false;
    }

    /**
     * Return whether the field 'payload.measurement_quality' is an array (false).
     */
    public static boolean isArray_payload_measurement_quality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.measurement_quality'
     */
    public static int offset_payload_measurement_quality() {
        return (216 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.measurement_quality'
     */
    public static int offsetBits_payload_measurement_quality() {
        return 216;
    }

    /**
     * Return the value (as a byte) of the field 'payload.measurement_quality'
     */
    public byte get_payload_measurement_quality() {
        return (byte)getUIntBEElement(offsetBits_payload_measurement_quality(), 2);
    }

    /**
     * Set the value of the field 'payload.measurement_quality'
     */
    public void set_payload_measurement_quality(byte value) {
        setUIntBEElement(offsetBits_payload_measurement_quality(), 2, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.measurement_quality'
     * WARNING: This field is not an even-sized number of bytes (2 bits).
     */
    public static int size_payload_measurement_quality() {
        return (2 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.measurement_quality'
     */
    public static int sizeBits_payload_measurement_quality() {
        return 2;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.space_vehicle
    //   Field type: byte
    //   Offset (bits): 218
    //   Size (bits): 6
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.space_vehicle' is signed (false).
     */
    public static boolean isSigned_payload_space_vehicle() {
        return false;
    }

    /**
     * Return whether the field 'payload.space_vehicle' is an array (false).
     */
    public static boolean isArray_payload_space_vehicle() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.space_vehicle'
     * WARNING: This field is not byte-aligned (bit offset 218).
     */
    public static int offset_payload_space_vehicle() {
        return (218 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.space_vehicle'
     */
    public static int offsetBits_payload_space_vehicle() {
        return 218;
    }

    /**
     * Return the value (as a byte) of the field 'payload.space_vehicle'
     */
    public byte get_payload_space_vehicle() {
        return (byte)getUIntBEElement(offsetBits_payload_space_vehicle(), 6);
    }

    /**
     * Set the value of the field 'payload.space_vehicle'
     */
    public void set_payload_space_vehicle(byte value) {
        setUIntBEElement(offsetBits_payload_space_vehicle(), 6, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.space_vehicle'
     * WARNING: This field is not an even-sized number of bytes (6 bits).
     */
    public static int size_payload_space_vehicle() {
        return (6 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.space_vehicle'
     */
    public static int sizeBits_payload_space_vehicle() {
        return 6;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.loss_of_lock
    //   Field type: byte
    //   Offset (bits): 224
    //   Size (bits): 2
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.loss_of_lock' is signed (false).
     */
    public static boolean isSigned_payload_loss_of_lock() {
        return false;
    }

    /**
     * Return whether the field 'payload.loss_of_lock' is an array (false).
     */
    public static boolean isArray_payload_loss_of_lock() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.loss_of_lock'
     */
    public static int offset_payload_loss_of_lock() {
        return (224 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.loss_of_lock'
     */
    public static int offsetBits_payload_loss_of_lock() {
        return 224;
    }

    /**
     * Return the value (as a byte) of the field 'payload.loss_of_lock'
     */
    public byte get_payload_loss_of_lock() {
        return (byte)getUIntBEElement(offsetBits_payload_loss_of_lock(), 2);
    }

    /**
     * Set the value of the field 'payload.loss_of_lock'
     */
    public void set_payload_loss_of_lock(byte value) {
        setUIntBEElement(offsetBits_payload_loss_of_lock(), 2, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.loss_of_lock'
     * WARNING: This field is not an even-sized number of bytes (2 bits).
     */
    public static int size_payload_loss_of_lock() {
        return (2 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.loss_of_lock'
     */
    public static int sizeBits_payload_loss_of_lock() {
        return 2;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.signal_strength
    //   Field type: byte
    //   Offset (bits): 226
    //   Size (bits): 6
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.signal_strength' is signed (false).
     */
    public static boolean isSigned_payload_signal_strength() {
        return false;
    }

    /**
     * Return whether the field 'payload.signal_strength' is an array (false).
     */
    public static boolean isArray_payload_signal_strength() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.signal_strength'
     * WARNING: This field is not byte-aligned (bit offset 226).
     */
    public static int offset_payload_signal_strength() {
        return (226 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.signal_strength'
     */
    public static int offsetBits_payload_signal_strength() {
        return 226;
    }

    /**
     * Return the value (as a byte) of the field 'payload.signal_strength'
     */
    public byte get_payload_signal_strength() {
        return (byte)getUIntBEElement(offsetBits_payload_signal_strength(), 6);
    }

    /**
     * Set the value of the field 'payload.signal_strength'
     */
    public void set_payload_signal_strength(byte value) {
        setUIntBEElement(offsetBits_payload_signal_strength(), 6, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.signal_strength'
     * WARNING: This field is not an even-sized number of bytes (6 bits).
     */
    public static int size_payload_signal_strength() {
        return (6 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'payload.signal_strength'
     */
    public static int sizeBits_payload_signal_strength() {
        return 6;
    }

}
