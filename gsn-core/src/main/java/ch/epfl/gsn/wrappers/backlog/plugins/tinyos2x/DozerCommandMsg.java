/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DozerCommandMsg'
 * message type.
 */

 package ch.epfl.gsn.wrappers.backlog.plugins.tinyos2x;

public class DozerCommandMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 5;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 80;

    /** Create a new DozerCommandMsg of size 5. */
    public DozerCommandMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DozerCommandMsg of the given data_length. */
    public DozerCommandMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerCommandMsg with the given data_length
     * and base offset.
     */
    public DozerCommandMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerCommandMsg using the given byte array
     * as backing store.
     */
    public DozerCommandMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerCommandMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DozerCommandMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerCommandMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DozerCommandMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerCommandMsg embedded in the given message
     * at the given base offset.
     */
    public DozerCommandMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerCommandMsg embedded in the given message
     * at the given base offset and length.
     */
    public DozerCommandMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DozerCommandMsg> \n";
      try {
        s += "  [destination=0x"+Long.toHexString(get_destination())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [cmd=0x"+Long.toHexString(get_cmd())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [arg=0x"+Long.toHexString(get_arg())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [repetitionCnt=0x"+Long.toHexString(get_repetitionCnt())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: destination
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'destination' is signed (false).
     */
    public static boolean isSigned_destination() {
        return false;
    }

    /**
     * Return whether the field 'destination' is an array (false).
     */
    public static boolean isArray_destination() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'destination'
     */
    public static int offset_destination() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'destination'
     */
    public static int offsetBits_destination() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'destination'
     */
    public int get_destination() {
        return (int)getUIntBEElement(offsetBits_destination(), 16);
    }

    /**
     * Set the value of the field 'destination'
     */
    public void set_destination(int value) {
        setUIntBEElement(offsetBits_destination(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'destination'
     */
    public static int size_destination() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'destination'
     */
    public static int sizeBits_destination() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: cmd
    //   Field type: byte, unsigned
    //   Offset (bits): 16
    //   Size (bits): 4
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'cmd' is signed (false).
     */
    public static boolean isSigned_cmd() {
        return false;
    }

    /**
     * Return whether the field 'cmd' is an array (false).
     */
    public static boolean isArray_cmd() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'cmd'
     */
    public static int offset_cmd() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'cmd'
     */
    public static int offsetBits_cmd() {
        return 16;
    }

    /**
     * Return the value (as a byte) of the field 'cmd'
     */
    public byte get_cmd() {
        return (byte)getUIntBEElement(offsetBits_cmd(), 4);
    }

    /**
     * Set the value of the field 'cmd'
     */
    public void set_cmd(byte value) {
        setUIntBEElement(offsetBits_cmd(), 4, value);
    }

    /**
     * Return the size, in bytes, of the field 'cmd'
     * WARNING: This field is not an even-sized number of bytes (4 bits).
     */
    public static int size_cmd() {
        return (4 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'cmd'
     */
    public static int sizeBits_cmd() {
        return 4;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: arg
    //   Field type: short, unsigned
    //   Offset (bits): 20
    //   Size (bits): 12
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'arg' is signed (false).
     */
    public static boolean isSigned_arg() {
        return false;
    }

    /**
     * Return whether the field 'arg' is an array (false).
     */
    public static boolean isArray_arg() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'arg'
     * WARNING: This field is not byte-aligned (bit offset 20).
     */
    public static int offset_arg() {
        return (20 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'arg'
     */
    public static int offsetBits_arg() {
        return 20;
    }

    /**
     * Return the value (as a short) of the field 'arg'
     */
    public short get_arg() {
        return (short)getUIntBEElement(offsetBits_arg(), 12);
    }

    /**
     * Set the value of the field 'arg'
     */
    public void set_arg(short value) {
        setUIntBEElement(offsetBits_arg(), 12, value);
    }

    /**
     * Return the size, in bytes, of the field 'arg'
     * WARNING: This field is not an even-sized number of bytes (12 bits).
     */
    public static int size_arg() {
        return (12 / 8) + 1;
    }

    /**
     * Return the size, in bits, of the field 'arg'
     */
    public static int sizeBits_arg() {
        return 12;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: repetitionCnt
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'repetitionCnt' is signed (false).
     */
    public static boolean isSigned_repetitionCnt() {
        return false;
    }

    /**
     * Return whether the field 'repetitionCnt' is an array (false).
     */
    public static boolean isArray_repetitionCnt() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'repetitionCnt'
     */
    public static int offset_repetitionCnt() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'repetitionCnt'
     */
    public static int offsetBits_repetitionCnt() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'repetitionCnt'
     */
    public short get_repetitionCnt() {
        return (short)getUIntBEElement(offsetBits_repetitionCnt(), 8);
    }

    /**
     * Set the value of the field 'repetitionCnt'
     */
    public void set_repetitionCnt(short value) {
        setUIntBEElement(offsetBits_repetitionCnt(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'repetitionCnt'
     */
    public static int size_repetitionCnt() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'repetitionCnt'
     */
    public static int sizeBits_repetitionCnt() {
        return 8;
    }

}
